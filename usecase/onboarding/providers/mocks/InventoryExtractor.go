// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/ironcore-dev/metal/domain/inventory"
	mock "github.com/stretchr/testify/mock"
)

// InventoryExtractor is an autogenerated mock type for the InventoryExtractor type
type InventoryExtractor struct {
	mock.Mock
}

// ByID provides a mock function with given fields: id
func (_m *InventoryExtractor) ByID(id domain.InventoryID) (domain.Inventory, error) {
	ret := _m.Called(id)

	var r0 domain.Inventory
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.InventoryID) (domain.Inventory, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(domain.InventoryID) domain.Inventory); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Inventory)
	}

	if rf, ok := ret.Get(1).(func(domain.InventoryID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ByUUID provides a mock function with given fields: uuid
func (_m *InventoryExtractor) ByUUID(uuid string) (domain.Inventory, error) {
	ret := _m.Called(uuid)

	var r0 domain.Inventory
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Inventory, error)); ok {
		return rf(uuid)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Inventory); ok {
		r0 = rf(uuid)
	} else {
		r0 = ret.Get(0).(domain.Inventory)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewInventoryExtractor creates a new instance of InventoryExtractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewInventoryExtractor(t interface {
	mock.TestingT
	Cleanup(func())
}) *InventoryExtractor {
	mock := &InventoryExtractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
