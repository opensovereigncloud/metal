// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/onmetal/metal-api/usecase/onboarding/dto"
	mock "github.com/stretchr/testify/mock"
)

// LoopbackSubnetExtractor is an autogenerated mock type for the LoopbackSubnetExtractor type
type LoopbackSubnetExtractor struct {
	mock.Mock
}

// ByType provides a mock function with given fields: ipType
func (_m *LoopbackSubnetExtractor) ByType(ipType string) (dto.SubnetInfo, error) {
	ret := _m.Called(ipType)

	var r0 dto.SubnetInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (dto.SubnetInfo, error)); ok {
		return rf(ipType)
	}
	if rf, ok := ret.Get(0).(func(string) dto.SubnetInfo); ok {
		r0 = rf(ipType)
	} else {
		r0 = ret.Get(0).(dto.SubnetInfo)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(ipType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IPv6ByName provides a mock function with given fields: name
func (_m *LoopbackSubnetExtractor) IPv6ByName(name string) (dto.SubnetInfo, error) {
	ret := _m.Called(name)

	var r0 dto.SubnetInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (dto.SubnetInfo, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) dto.SubnetInfo); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(dto.SubnetInfo)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLoopbackSubnetExtractor creates a new instance of LoopbackSubnetExtractor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoopbackSubnetExtractor(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoopbackSubnetExtractor {
	mock := &LoopbackSubnetExtractor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
