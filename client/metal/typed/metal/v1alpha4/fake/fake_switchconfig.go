// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1alpha4 "github.com/ironcore-dev/metal/apis/metal/v1alpha4"
	metalv1alpha4 "github.com/ironcore-dev/metal/client/applyconfiguration/metal/v1alpha4"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeSwitchConfigs implements SwitchConfigInterface
type FakeSwitchConfigs struct {
	Fake *FakeMetalV1alpha4
	ns   string
}

var switchconfigsResource = v1alpha4.SchemeGroupVersion.WithResource("switchconfigs")

var switchconfigsKind = v1alpha4.SchemeGroupVersion.WithKind("SwitchConfig")

// Get takes name of the switchConfig, and returns the corresponding switchConfig object, and an error if there is any.
func (c *FakeSwitchConfigs) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha4.SwitchConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(switchconfigsResource, c.ns, name), &v1alpha4.SwitchConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha4.SwitchConfig), err
}

// List takes label and field selectors, and returns the list of SwitchConfigs that match those selectors.
func (c *FakeSwitchConfigs) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha4.SwitchConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(switchconfigsResource, switchconfigsKind, c.ns, opts), &v1alpha4.SwitchConfigList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha4.SwitchConfigList{ListMeta: obj.(*v1alpha4.SwitchConfigList).ListMeta}
	for _, item := range obj.(*v1alpha4.SwitchConfigList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested switchConfigs.
func (c *FakeSwitchConfigs) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(switchconfigsResource, c.ns, opts))

}

// Create takes the representation of a switchConfig and creates it.  Returns the server's representation of the switchConfig, and an error, if there is any.
func (c *FakeSwitchConfigs) Create(ctx context.Context, switchConfig *v1alpha4.SwitchConfig, opts v1.CreateOptions) (result *v1alpha4.SwitchConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(switchconfigsResource, c.ns, switchConfig), &v1alpha4.SwitchConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha4.SwitchConfig), err
}

// Update takes the representation of a switchConfig and updates it. Returns the server's representation of the switchConfig, and an error, if there is any.
func (c *FakeSwitchConfigs) Update(ctx context.Context, switchConfig *v1alpha4.SwitchConfig, opts v1.UpdateOptions) (result *v1alpha4.SwitchConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(switchconfigsResource, c.ns, switchConfig), &v1alpha4.SwitchConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha4.SwitchConfig), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeSwitchConfigs) UpdateStatus(ctx context.Context, switchConfig *v1alpha4.SwitchConfig, opts v1.UpdateOptions) (*v1alpha4.SwitchConfig, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(switchconfigsResource, "status", c.ns, switchConfig), &v1alpha4.SwitchConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha4.SwitchConfig), err
}

// Delete takes name of the switchConfig and deletes it. Returns an error if one occurs.
func (c *FakeSwitchConfigs) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteActionWithOptions(switchconfigsResource, c.ns, name, opts), &v1alpha4.SwitchConfig{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeSwitchConfigs) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(switchconfigsResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha4.SwitchConfigList{})
	return err
}

// Patch applies the patch and returns the patched switchConfig.
func (c *FakeSwitchConfigs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha4.SwitchConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(switchconfigsResource, c.ns, name, pt, data, subresources...), &v1alpha4.SwitchConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha4.SwitchConfig), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied switchConfig.
func (c *FakeSwitchConfigs) Apply(ctx context.Context, switchConfig *metalv1alpha4.SwitchConfigApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha4.SwitchConfig, err error) {
	if switchConfig == nil {
		return nil, fmt.Errorf("switchConfig provided to Apply must not be nil")
	}
	data, err := json.Marshal(switchConfig)
	if err != nil {
		return nil, err
	}
	name := switchConfig.Name
	if name == nil {
		return nil, fmt.Errorf("switchConfig.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(switchconfigsResource, c.ns, *name, types.ApplyPatchType, data), &v1alpha4.SwitchConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha4.SwitchConfig), err
}

// ApplyStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating ApplyStatus().
func (c *FakeSwitchConfigs) ApplyStatus(ctx context.Context, switchConfig *metalv1alpha4.SwitchConfigApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha4.SwitchConfig, err error) {
	if switchConfig == nil {
		return nil, fmt.Errorf("switchConfig provided to Apply must not be nil")
	}
	data, err := json.Marshal(switchConfig)
	if err != nil {
		return nil, err
	}
	name := switchConfig.Name
	if name == nil {
		return nil, fmt.Errorf("switchConfig.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(switchconfigsResource, c.ns, *name, types.ApplyPatchType, data, "status"), &v1alpha4.SwitchConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha4.SwitchConfig), err
}
