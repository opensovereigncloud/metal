// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha4

import (
	v1alpha4 "github.com/ironcore-dev/metal/apis/metal/v1alpha4"
)

// AddressesApplyConfiguration represents an declarative configuration of the Addresses type for use
// with apply.
type AddressesApplyConfiguration struct {
	IPv4 []v1alpha4.IPAddrSpec `json:"ipv4,omitempty"`
	IPv6 []v1alpha4.IPAddrSpec `json:"ipv6,omitempty"`
}

// AddressesApplyConfiguration constructs an declarative configuration of the Addresses type for use with
// apply.
func Addresses() *AddressesApplyConfiguration {
	return &AddressesApplyConfiguration{}
}

// WithIPv4 adds the given value to the IPv4 field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IPv4 field.
func (b *AddressesApplyConfiguration) WithIPv4(values ...v1alpha4.IPAddrSpec) *AddressesApplyConfiguration {
	for i := range values {
		b.IPv4 = append(b.IPv4, values[i])
	}
	return b
}

// WithIPv6 adds the given value to the IPv6 field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IPv6 field.
func (b *AddressesApplyConfiguration) WithIPv6(values ...v1alpha4.IPAddrSpec) *AddressesApplyConfiguration {
	for i := range values {
		b.IPv6 = append(b.IPv6, values[i])
	}
	return b
}
