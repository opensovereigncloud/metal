// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha4

import (
	v1alpha4 "github.com/ironcore-dev/metal/apis/metal/v1alpha4"
	resource "k8s.io/apimachinery/pkg/api/resource"
)

// ConstraintSpecApplyConfiguration represents an declarative configuration of the ConstraintSpec type for use
// with apply.
type ConstraintSpecApplyConfiguration struct {
	Path               *v1alpha4.JSONPath          `json:"path,omitempty"`
	Aggregate          *v1alpha4.AggregateType     `json:"agg,omitempty"`
	Equal              *v1alpha4.ConstraintValSpec `json:"eq,omitempty"`
	NotEqual           *v1alpha4.ConstraintValSpec `json:"neq,omitempty"`
	LessThan           *resource.Quantity          `json:"lt,omitempty"`
	LessThanOrEqual    *resource.Quantity          `json:"lte,omitempty"`
	GreaterThan        *resource.Quantity          `json:"gt,omitempty"`
	GreaterThanOrEqual *resource.Quantity          `json:"gte,omitempty"`
}

// ConstraintSpecApplyConfiguration constructs an declarative configuration of the ConstraintSpec type for use with
// apply.
func ConstraintSpec() *ConstraintSpecApplyConfiguration {
	return &ConstraintSpecApplyConfiguration{}
}

// WithPath sets the Path field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Path field is set to the value of the last call.
func (b *ConstraintSpecApplyConfiguration) WithPath(value v1alpha4.JSONPath) *ConstraintSpecApplyConfiguration {
	b.Path = &value
	return b
}

// WithAggregate sets the Aggregate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Aggregate field is set to the value of the last call.
func (b *ConstraintSpecApplyConfiguration) WithAggregate(value v1alpha4.AggregateType) *ConstraintSpecApplyConfiguration {
	b.Aggregate = &value
	return b
}

// WithEqual sets the Equal field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Equal field is set to the value of the last call.
func (b *ConstraintSpecApplyConfiguration) WithEqual(value v1alpha4.ConstraintValSpec) *ConstraintSpecApplyConfiguration {
	b.Equal = &value
	return b
}

// WithNotEqual sets the NotEqual field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the NotEqual field is set to the value of the last call.
func (b *ConstraintSpecApplyConfiguration) WithNotEqual(value v1alpha4.ConstraintValSpec) *ConstraintSpecApplyConfiguration {
	b.NotEqual = &value
	return b
}

// WithLessThan sets the LessThan field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LessThan field is set to the value of the last call.
func (b *ConstraintSpecApplyConfiguration) WithLessThan(value resource.Quantity) *ConstraintSpecApplyConfiguration {
	b.LessThan = &value
	return b
}

// WithLessThanOrEqual sets the LessThanOrEqual field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LessThanOrEqual field is set to the value of the last call.
func (b *ConstraintSpecApplyConfiguration) WithLessThanOrEqual(value resource.Quantity) *ConstraintSpecApplyConfiguration {
	b.LessThanOrEqual = &value
	return b
}

// WithGreaterThan sets the GreaterThan field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GreaterThan field is set to the value of the last call.
func (b *ConstraintSpecApplyConfiguration) WithGreaterThan(value resource.Quantity) *ConstraintSpecApplyConfiguration {
	b.GreaterThan = &value
	return b
}

// WithGreaterThanOrEqual sets the GreaterThanOrEqual field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GreaterThanOrEqual field is set to the value of the last call.
func (b *ConstraintSpecApplyConfiguration) WithGreaterThanOrEqual(value resource.Quantity) *ConstraintSpecApplyConfiguration {
	b.GreaterThanOrEqual = &value
	return b
}
