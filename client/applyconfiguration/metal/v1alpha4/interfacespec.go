// SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha4

import (
	metalv1alpha4 "github.com/ironcore-dev/metal/apis/metal/v1alpha4"
)

// InterfaceSpecApplyConfiguration represents an declarative configuration of the InterfaceSpec type for use
// with apply.
type InterfaceSpecApplyConfiguration struct {
	PortParametersSpecApplyConfiguration `json:",inline"`
	MACAddress                           *string                        `json:"macAddress,omitempty"`
	Speed                                *uint32                        `json:"speed,omitempty"`
	IP                                   []*metalv1alpha4.IPAddressSpec `json:"ip,omitempty"`
	Direction                            *string                        `json:"direction,omitempty"`
	Peer                                 *PeerSpecApplyConfiguration    `json:"peer,omitempty"`
}

// InterfaceSpecApplyConfiguration constructs an declarative configuration of the InterfaceSpec type for use with
// apply.
func InterfaceSpec() *InterfaceSpecApplyConfiguration {
	return &InterfaceSpecApplyConfiguration{}
}

// WithMACAddress sets the MACAddress field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MACAddress field is set to the value of the last call.
func (b *InterfaceSpecApplyConfiguration) WithMACAddress(value string) *InterfaceSpecApplyConfiguration {
	b.MACAddress = &value
	return b
}

// WithSpeed sets the Speed field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Speed field is set to the value of the last call.
func (b *InterfaceSpecApplyConfiguration) WithSpeed(value uint32) *InterfaceSpecApplyConfiguration {
	b.Speed = &value
	return b
}

// WithIP adds the given value to the IP field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IP field.
func (b *InterfaceSpecApplyConfiguration) WithIP(values ...**metalv1alpha4.IPAddressSpec) *InterfaceSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithIP")
		}
		b.IP = append(b.IP, *values[i])
	}
	return b
}

// WithDirection sets the Direction field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Direction field is set to the value of the last call.
func (b *InterfaceSpecApplyConfiguration) WithDirection(value string) *InterfaceSpecApplyConfiguration {
	b.Direction = &value
	return b
}

// WithPeer sets the Peer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Peer field is set to the value of the last call.
func (b *InterfaceSpecApplyConfiguration) WithPeer(value *PeerSpecApplyConfiguration) *InterfaceSpecApplyConfiguration {
	b.Peer = value
	return b
}
