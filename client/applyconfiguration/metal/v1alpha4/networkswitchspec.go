// SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha4

import (
	metav1 "github.com/ironcore-dev/metal/client/applyconfiguration/meta/v1"
	v1 "k8s.io/api/core/v1"
)

// NetworkSwitchSpecApplyConfiguration represents an declarative configuration of the NetworkSwitchSpec type for use
// with apply.
type NetworkSwitchSpecApplyConfiguration struct {
	InventoryRef   *v1.LocalObjectReference                `json:"inventoryRef,omitempty"`
	ConfigSelector *metav1.LabelSelectorApplyConfiguration `json:"configSelector,omitempty"`
	Managed        *bool                                   `json:"managed,omitempty"`
	Cordon         *bool                                   `json:"cordon,omitempty"`
	TopSpine       *bool                                   `json:"topSpine,omitempty"`
	ScanPorts      *bool                                   `json:"scanPorts,omitempty"`
	IPAM           *IPAMSpecApplyConfiguration             `json:"ipam,omitempty"`
	Interfaces     *InterfacesSpecApplyConfiguration       `json:"interfaces,omitempty"`
}

// NetworkSwitchSpecApplyConfiguration constructs an declarative configuration of the NetworkSwitchSpec type for use with
// apply.
func NetworkSwitchSpec() *NetworkSwitchSpecApplyConfiguration {
	return &NetworkSwitchSpecApplyConfiguration{}
}

// WithInventoryRef sets the InventoryRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the InventoryRef field is set to the value of the last call.
func (b *NetworkSwitchSpecApplyConfiguration) WithInventoryRef(value v1.LocalObjectReference) *NetworkSwitchSpecApplyConfiguration {
	b.InventoryRef = &value
	return b
}

// WithConfigSelector sets the ConfigSelector field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConfigSelector field is set to the value of the last call.
func (b *NetworkSwitchSpecApplyConfiguration) WithConfigSelector(value *metav1.LabelSelectorApplyConfiguration) *NetworkSwitchSpecApplyConfiguration {
	b.ConfigSelector = value
	return b
}

// WithManaged sets the Managed field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Managed field is set to the value of the last call.
func (b *NetworkSwitchSpecApplyConfiguration) WithManaged(value bool) *NetworkSwitchSpecApplyConfiguration {
	b.Managed = &value
	return b
}

// WithCordon sets the Cordon field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Cordon field is set to the value of the last call.
func (b *NetworkSwitchSpecApplyConfiguration) WithCordon(value bool) *NetworkSwitchSpecApplyConfiguration {
	b.Cordon = &value
	return b
}

// WithTopSpine sets the TopSpine field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TopSpine field is set to the value of the last call.
func (b *NetworkSwitchSpecApplyConfiguration) WithTopSpine(value bool) *NetworkSwitchSpecApplyConfiguration {
	b.TopSpine = &value
	return b
}

// WithScanPorts sets the ScanPorts field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ScanPorts field is set to the value of the last call.
func (b *NetworkSwitchSpecApplyConfiguration) WithScanPorts(value bool) *NetworkSwitchSpecApplyConfiguration {
	b.ScanPorts = &value
	return b
}

// WithIPAM sets the IPAM field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPAM field is set to the value of the last call.
func (b *NetworkSwitchSpecApplyConfiguration) WithIPAM(value *IPAMSpecApplyConfiguration) *NetworkSwitchSpecApplyConfiguration {
	b.IPAM = value
	return b
}

// WithInterfaces sets the Interfaces field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Interfaces field is set to the value of the last call.
func (b *NetworkSwitchSpecApplyConfiguration) WithInterfaces(value *InterfacesSpecApplyConfiguration) *NetworkSwitchSpecApplyConfiguration {
	b.Interfaces = value
	return b
}
