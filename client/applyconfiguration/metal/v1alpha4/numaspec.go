// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha4

// NumaSpecApplyConfiguration represents an declarative configuration of the NumaSpec type for use
// with apply.
type NumaSpecApplyConfiguration struct {
	ID        *int                          `json:"id,omitempty"`
	CPUs      []int                         `json:"cpus,omitempty"`
	Distances []int                         `json:"distances,omitempty"`
	Memory    *MemorySpecApplyConfiguration `json:"memory,omitempty"`
}

// NumaSpecApplyConfiguration constructs an declarative configuration of the NumaSpec type for use with
// apply.
func NumaSpec() *NumaSpecApplyConfiguration {
	return &NumaSpecApplyConfiguration{}
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *NumaSpecApplyConfiguration) WithID(value int) *NumaSpecApplyConfiguration {
	b.ID = &value
	return b
}

// WithCPUs adds the given value to the CPUs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the CPUs field.
func (b *NumaSpecApplyConfiguration) WithCPUs(values ...int) *NumaSpecApplyConfiguration {
	for i := range values {
		b.CPUs = append(b.CPUs, values[i])
	}
	return b
}

// WithDistances adds the given value to the Distances field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Distances field.
func (b *NumaSpecApplyConfiguration) WithDistances(values ...int) *NumaSpecApplyConfiguration {
	for i := range values {
		b.Distances = append(b.Distances, values[i])
	}
	return b
}

// WithMemory sets the Memory field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Memory field is set to the value of the last call.
func (b *NumaSpecApplyConfiguration) WithMemory(value *MemorySpecApplyConfiguration) *NumaSpecApplyConfiguration {
	b.Memory = value
	return b
}
