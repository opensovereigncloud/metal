// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha4

import (
	metalv1alpha4 "github.com/ironcore-dev/metal/apis/metal/v1alpha4"
)

// InterfaceOverridesSpecApplyConfiguration represents an declarative configuration of the InterfaceOverridesSpec type for use
// with apply.
type InterfaceOverridesSpecApplyConfiguration struct {
	PortParametersSpecApplyConfiguration `json:",inline"`
	Name                                 *string                           `json:"name,omitempty"`
	IP                                   []*metalv1alpha4.AdditionalIPSpec `json:"ip,omitempty"`
}

// InterfaceOverridesSpecApplyConfiguration constructs an declarative configuration of the InterfaceOverridesSpec type for use with
// apply.
func InterfaceOverridesSpec() *InterfaceOverridesSpecApplyConfiguration {
	return &InterfaceOverridesSpecApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *InterfaceOverridesSpecApplyConfiguration) WithName(value string) *InterfaceOverridesSpecApplyConfiguration {
	b.Name = &value
	return b
}

// WithIP adds the given value to the IP field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IP field.
func (b *InterfaceOverridesSpecApplyConfiguration) WithIP(values ...**metalv1alpha4.AdditionalIPSpec) *InterfaceOverridesSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithIP")
		}
		b.IP = append(b.IP, *values[i])
	}
	return b
}
