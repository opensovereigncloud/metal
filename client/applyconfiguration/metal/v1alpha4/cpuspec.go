// SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha4

import (
	resource "k8s.io/apimachinery/pkg/api/resource"
)

// CPUSpecApplyConfiguration represents an declarative configuration of the CPUSpec type for use
// with apply.
type CPUSpecApplyConfiguration struct {
	PhysicalID      *uint64            `json:"physicalId,omitempty"`
	LogicalIDs      []uint64           `json:"logicalIds,omitempty"`
	Cores           *uint64            `json:"cores,omitempty"`
	Siblings        *uint64            `json:"siblings,omitempty"`
	VendorID        *string            `json:"vendorId,omitempty"`
	Family          *string            `json:"family,omitempty"`
	Model           *string            `json:"model,omitempty"`
	ModelName       *string            `json:"modelName,omitempty"`
	Stepping        *string            `json:"stepping,omitempty"`
	Microcode       *string            `json:"microcode,omitempty"`
	MHz             *resource.Quantity `json:"mhz,omitempty"`
	CacheSize       *string            `json:"cacheSize,omitempty"`
	FPU             *bool              `json:"fpu,omitempty"`
	FPUException    *bool              `json:"fpuException,omitempty"`
	CPUIDLevel      *uint64            `json:"cpuIdLevel,omitempty"`
	WP              *bool              `json:"wp,omitempty"`
	Flags           []string           `json:"flags,omitempty"`
	VMXFlags        []string           `json:"vmxFlags,omitempty"`
	Bugs            []string           `json:"bugs,omitempty"`
	BogoMIPS        *resource.Quantity `json:"bogoMips,omitempty"`
	CLFlushSize     *uint64            `json:"clFlushSize,omitempty"`
	CacheAlignment  *uint64            `json:"cacheAlignment,omitempty"`
	AddressSizes    *string            `json:"addressSizes,omitempty"`
	PowerManagement *string            `json:"powerManagement,omitempty"`
}

// CPUSpecApplyConfiguration constructs an declarative configuration of the CPUSpec type for use with
// apply.
func CPUSpec() *CPUSpecApplyConfiguration {
	return &CPUSpecApplyConfiguration{}
}

// WithPhysicalID sets the PhysicalID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PhysicalID field is set to the value of the last call.
func (b *CPUSpecApplyConfiguration) WithPhysicalID(value uint64) *CPUSpecApplyConfiguration {
	b.PhysicalID = &value
	return b
}

// WithLogicalIDs adds the given value to the LogicalIDs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the LogicalIDs field.
func (b *CPUSpecApplyConfiguration) WithLogicalIDs(values ...uint64) *CPUSpecApplyConfiguration {
	for i := range values {
		b.LogicalIDs = append(b.LogicalIDs, values[i])
	}
	return b
}

// WithCores sets the Cores field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Cores field is set to the value of the last call.
func (b *CPUSpecApplyConfiguration) WithCores(value uint64) *CPUSpecApplyConfiguration {
	b.Cores = &value
	return b
}

// WithSiblings sets the Siblings field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Siblings field is set to the value of the last call.
func (b *CPUSpecApplyConfiguration) WithSiblings(value uint64) *CPUSpecApplyConfiguration {
	b.Siblings = &value
	return b
}

// WithVendorID sets the VendorID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VendorID field is set to the value of the last call.
func (b *CPUSpecApplyConfiguration) WithVendorID(value string) *CPUSpecApplyConfiguration {
	b.VendorID = &value
	return b
}

// WithFamily sets the Family field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Family field is set to the value of the last call.
func (b *CPUSpecApplyConfiguration) WithFamily(value string) *CPUSpecApplyConfiguration {
	b.Family = &value
	return b
}

// WithModel sets the Model field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Model field is set to the value of the last call.
func (b *CPUSpecApplyConfiguration) WithModel(value string) *CPUSpecApplyConfiguration {
	b.Model = &value
	return b
}

// WithModelName sets the ModelName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ModelName field is set to the value of the last call.
func (b *CPUSpecApplyConfiguration) WithModelName(value string) *CPUSpecApplyConfiguration {
	b.ModelName = &value
	return b
}

// WithStepping sets the Stepping field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Stepping field is set to the value of the last call.
func (b *CPUSpecApplyConfiguration) WithStepping(value string) *CPUSpecApplyConfiguration {
	b.Stepping = &value
	return b
}

// WithMicrocode sets the Microcode field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Microcode field is set to the value of the last call.
func (b *CPUSpecApplyConfiguration) WithMicrocode(value string) *CPUSpecApplyConfiguration {
	b.Microcode = &value
	return b
}

// WithMHz sets the MHz field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MHz field is set to the value of the last call.
func (b *CPUSpecApplyConfiguration) WithMHz(value resource.Quantity) *CPUSpecApplyConfiguration {
	b.MHz = &value
	return b
}

// WithCacheSize sets the CacheSize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CacheSize field is set to the value of the last call.
func (b *CPUSpecApplyConfiguration) WithCacheSize(value string) *CPUSpecApplyConfiguration {
	b.CacheSize = &value
	return b
}

// WithFPU sets the FPU field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FPU field is set to the value of the last call.
func (b *CPUSpecApplyConfiguration) WithFPU(value bool) *CPUSpecApplyConfiguration {
	b.FPU = &value
	return b
}

// WithFPUException sets the FPUException field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FPUException field is set to the value of the last call.
func (b *CPUSpecApplyConfiguration) WithFPUException(value bool) *CPUSpecApplyConfiguration {
	b.FPUException = &value
	return b
}

// WithCPUIDLevel sets the CPUIDLevel field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CPUIDLevel field is set to the value of the last call.
func (b *CPUSpecApplyConfiguration) WithCPUIDLevel(value uint64) *CPUSpecApplyConfiguration {
	b.CPUIDLevel = &value
	return b
}

// WithWP sets the WP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the WP field is set to the value of the last call.
func (b *CPUSpecApplyConfiguration) WithWP(value bool) *CPUSpecApplyConfiguration {
	b.WP = &value
	return b
}

// WithFlags adds the given value to the Flags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Flags field.
func (b *CPUSpecApplyConfiguration) WithFlags(values ...string) *CPUSpecApplyConfiguration {
	for i := range values {
		b.Flags = append(b.Flags, values[i])
	}
	return b
}

// WithVMXFlags adds the given value to the VMXFlags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the VMXFlags field.
func (b *CPUSpecApplyConfiguration) WithVMXFlags(values ...string) *CPUSpecApplyConfiguration {
	for i := range values {
		b.VMXFlags = append(b.VMXFlags, values[i])
	}
	return b
}

// WithBugs adds the given value to the Bugs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Bugs field.
func (b *CPUSpecApplyConfiguration) WithBugs(values ...string) *CPUSpecApplyConfiguration {
	for i := range values {
		b.Bugs = append(b.Bugs, values[i])
	}
	return b
}

// WithBogoMIPS sets the BogoMIPS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BogoMIPS field is set to the value of the last call.
func (b *CPUSpecApplyConfiguration) WithBogoMIPS(value resource.Quantity) *CPUSpecApplyConfiguration {
	b.BogoMIPS = &value
	return b
}

// WithCLFlushSize sets the CLFlushSize field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CLFlushSize field is set to the value of the last call.
func (b *CPUSpecApplyConfiguration) WithCLFlushSize(value uint64) *CPUSpecApplyConfiguration {
	b.CLFlushSize = &value
	return b
}

// WithCacheAlignment sets the CacheAlignment field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the CacheAlignment field is set to the value of the last call.
func (b *CPUSpecApplyConfiguration) WithCacheAlignment(value uint64) *CPUSpecApplyConfiguration {
	b.CacheAlignment = &value
	return b
}

// WithAddressSizes sets the AddressSizes field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AddressSizes field is set to the value of the last call.
func (b *CPUSpecApplyConfiguration) WithAddressSizes(value string) *CPUSpecApplyConfiguration {
	b.AddressSizes = &value
	return b
}

// WithPowerManagement sets the PowerManagement field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PowerManagement field is set to the value of the last call.
func (b *CPUSpecApplyConfiguration) WithPowerManagement(value string) *CPUSpecApplyConfiguration {
	b.PowerManagement = &value
	return b
}
