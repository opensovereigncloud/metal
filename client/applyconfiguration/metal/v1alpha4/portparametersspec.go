// SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha4

// PortParametersSpecApplyConfiguration represents an declarative configuration of the PortParametersSpec type for use
// with apply.
type PortParametersSpecApplyConfiguration struct {
	Lanes          *uint32 `json:"lanes,omitempty"`
	MTU            *uint32 `json:"mtu,omitempty"`
	IPv4MaskLength *uint32 `json:"ipv4MaskLength,omitempty"`
	IPv6Prefix     *uint32 `json:"ipv6Prefix,omitempty"`
	FEC            *string `json:"fec,omitempty"`
	State          *string `json:"state,omitempty"`
}

// PortParametersSpecApplyConfiguration constructs an declarative configuration of the PortParametersSpec type for use with
// apply.
func PortParametersSpec() *PortParametersSpecApplyConfiguration {
	return &PortParametersSpecApplyConfiguration{}
}

// WithLanes sets the Lanes field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Lanes field is set to the value of the last call.
func (b *PortParametersSpecApplyConfiguration) WithLanes(value uint32) *PortParametersSpecApplyConfiguration {
	b.Lanes = &value
	return b
}

// WithMTU sets the MTU field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MTU field is set to the value of the last call.
func (b *PortParametersSpecApplyConfiguration) WithMTU(value uint32) *PortParametersSpecApplyConfiguration {
	b.MTU = &value
	return b
}

// WithIPv4MaskLength sets the IPv4MaskLength field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPv4MaskLength field is set to the value of the last call.
func (b *PortParametersSpecApplyConfiguration) WithIPv4MaskLength(value uint32) *PortParametersSpecApplyConfiguration {
	b.IPv4MaskLength = &value
	return b
}

// WithIPv6Prefix sets the IPv6Prefix field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IPv6Prefix field is set to the value of the last call.
func (b *PortParametersSpecApplyConfiguration) WithIPv6Prefix(value uint32) *PortParametersSpecApplyConfiguration {
	b.IPv6Prefix = &value
	return b
}

// WithFEC sets the FEC field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FEC field is set to the value of the last call.
func (b *PortParametersSpecApplyConfiguration) WithFEC(value string) *PortParametersSpecApplyConfiguration {
	b.FEC = &value
	return b
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *PortParametersSpecApplyConfiguration) WithState(value string) *PortParametersSpecApplyConfiguration {
	b.State = &value
	return b
}
