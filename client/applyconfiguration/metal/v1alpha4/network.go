// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha4

// NetworkApplyConfiguration represents an declarative configuration of the Network type for use
// with apply.
type NetworkApplyConfiguration struct {
	ASN          *uint32                              `json:"asn,omitempty"`
	Redundancy   *string                              `json:"redundancy,omitempty"`
	Ports        *int                                 `json:"ports,omitempty"`
	UnknownPorts *int                                 `json:"unknown_ports,omitempty"`
	Interfaces   []InterfaceApplyConfiguration        `json:"interfaces,omitempty"`
	Loopbacks    *LoopbackAddressesApplyConfiguration `json:"loopback_addresses,omitempty"`
}

// NetworkApplyConfiguration constructs an declarative configuration of the Network type for use with
// apply.
func Network() *NetworkApplyConfiguration {
	return &NetworkApplyConfiguration{}
}

// WithASN sets the ASN field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ASN field is set to the value of the last call.
func (b *NetworkApplyConfiguration) WithASN(value uint32) *NetworkApplyConfiguration {
	b.ASN = &value
	return b
}

// WithRedundancy sets the Redundancy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Redundancy field is set to the value of the last call.
func (b *NetworkApplyConfiguration) WithRedundancy(value string) *NetworkApplyConfiguration {
	b.Redundancy = &value
	return b
}

// WithPorts sets the Ports field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Ports field is set to the value of the last call.
func (b *NetworkApplyConfiguration) WithPorts(value int) *NetworkApplyConfiguration {
	b.Ports = &value
	return b
}

// WithUnknownPorts sets the UnknownPorts field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UnknownPorts field is set to the value of the last call.
func (b *NetworkApplyConfiguration) WithUnknownPorts(value int) *NetworkApplyConfiguration {
	b.UnknownPorts = &value
	return b
}

// WithInterfaces adds the given value to the Interfaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Interfaces field.
func (b *NetworkApplyConfiguration) WithInterfaces(values ...*InterfaceApplyConfiguration) *NetworkApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithInterfaces")
		}
		b.Interfaces = append(b.Interfaces, *values[i])
	}
	return b
}

// WithLoopbacks sets the Loopbacks field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Loopbacks field is set to the value of the last call.
func (b *NetworkApplyConfiguration) WithLoopbacks(value *LoopbackAddressesApplyConfiguration) *NetworkApplyConfiguration {
	b.Loopbacks = value
	return b
}
