// SPDX-FileCopyrightText: 2023 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha4

// InventorySpecApplyConfiguration represents an declarative configuration of the InventorySpec type for use
// with apply.
type InventorySpecApplyConfiguration struct {
	System     *SystemSpecApplyConfiguration     `json:"system,omitempty"`
	IPMIs      []IPMISpecApplyConfiguration      `json:"ipmis,omitempty"`
	Blocks     []BlockSpecApplyConfiguration     `json:"blocks,omitempty"`
	Memory     *MemorySpecApplyConfiguration     `json:"memory,omitempty"`
	CPUs       []CPUSpecApplyConfiguration       `json:"cpus,omitempty"`
	NUMA       []NumaSpecApplyConfiguration      `json:"numa,omitempty"`
	PCIDevices []PCIDeviceSpecApplyConfiguration `json:"pciDevices,omitempty"`
	NICs       []NICSpecApplyConfiguration       `json:"nics,omitempty"`
	Virt       *VirtSpecApplyConfiguration       `json:"virt,omitempty"`
	Host       *HostSpecApplyConfiguration       `json:"host,omitempty"`
	Distro     *DistroSpecApplyConfiguration     `json:"distro,omitempty"`
}

// InventorySpecApplyConfiguration constructs an declarative configuration of the InventorySpec type for use with
// apply.
func InventorySpec() *InventorySpecApplyConfiguration {
	return &InventorySpecApplyConfiguration{}
}

// WithSystem sets the System field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the System field is set to the value of the last call.
func (b *InventorySpecApplyConfiguration) WithSystem(value *SystemSpecApplyConfiguration) *InventorySpecApplyConfiguration {
	b.System = value
	return b
}

// WithIPMIs adds the given value to the IPMIs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IPMIs field.
func (b *InventorySpecApplyConfiguration) WithIPMIs(values ...*IPMISpecApplyConfiguration) *InventorySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithIPMIs")
		}
		b.IPMIs = append(b.IPMIs, *values[i])
	}
	return b
}

// WithBlocks adds the given value to the Blocks field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Blocks field.
func (b *InventorySpecApplyConfiguration) WithBlocks(values ...*BlockSpecApplyConfiguration) *InventorySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithBlocks")
		}
		b.Blocks = append(b.Blocks, *values[i])
	}
	return b
}

// WithMemory sets the Memory field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Memory field is set to the value of the last call.
func (b *InventorySpecApplyConfiguration) WithMemory(value *MemorySpecApplyConfiguration) *InventorySpecApplyConfiguration {
	b.Memory = value
	return b
}

// WithCPUs adds the given value to the CPUs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the CPUs field.
func (b *InventorySpecApplyConfiguration) WithCPUs(values ...*CPUSpecApplyConfiguration) *InventorySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithCPUs")
		}
		b.CPUs = append(b.CPUs, *values[i])
	}
	return b
}

// WithNUMA adds the given value to the NUMA field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NUMA field.
func (b *InventorySpecApplyConfiguration) WithNUMA(values ...*NumaSpecApplyConfiguration) *InventorySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithNUMA")
		}
		b.NUMA = append(b.NUMA, *values[i])
	}
	return b
}

// WithPCIDevices adds the given value to the PCIDevices field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the PCIDevices field.
func (b *InventorySpecApplyConfiguration) WithPCIDevices(values ...*PCIDeviceSpecApplyConfiguration) *InventorySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPCIDevices")
		}
		b.PCIDevices = append(b.PCIDevices, *values[i])
	}
	return b
}

// WithNICs adds the given value to the NICs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the NICs field.
func (b *InventorySpecApplyConfiguration) WithNICs(values ...*NICSpecApplyConfiguration) *InventorySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithNICs")
		}
		b.NICs = append(b.NICs, *values[i])
	}
	return b
}

// WithVirt sets the Virt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Virt field is set to the value of the last call.
func (b *InventorySpecApplyConfiguration) WithVirt(value *VirtSpecApplyConfiguration) *InventorySpecApplyConfiguration {
	b.Virt = value
	return b
}

// WithHost sets the Host field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Host field is set to the value of the last call.
func (b *InventorySpecApplyConfiguration) WithHost(value *HostSpecApplyConfiguration) *InventorySpecApplyConfiguration {
	b.Host = value
	return b
}

// WithDistro sets the Distro field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Distro field is set to the value of the last call.
func (b *InventorySpecApplyConfiguration) WithDistro(value *DistroSpecApplyConfiguration) *InventorySpecApplyConfiguration {
	b.Distro = value
	return b
}
