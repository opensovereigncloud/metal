// SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha4

import (
	v1alpha4 "github.com/ironcore-dev/metal/apis/metal/v1alpha4"
)

// LLDPSpecApplyConfiguration represents an declarative configuration of the LLDPSpec type for use
// with apply.
type LLDPSpecApplyConfiguration struct {
	ChassisID         *string                     `json:"chassisId,omitempty"`
	SystemName        *string                     `json:"systemName,omitempty"`
	SystemDescription *string                     `json:"systemDescription,omitempty"`
	PortID            *string                     `json:"portId,omitempty"`
	PortDescription   *string                     `json:"portDescription,omitempty"`
	Capabilities      []v1alpha4.LLDPCapabilities `json:"capabilities,omitempty"`
}

// LLDPSpecApplyConfiguration constructs an declarative configuration of the LLDPSpec type for use with
// apply.
func LLDPSpec() *LLDPSpecApplyConfiguration {
	return &LLDPSpecApplyConfiguration{}
}

// WithChassisID sets the ChassisID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ChassisID field is set to the value of the last call.
func (b *LLDPSpecApplyConfiguration) WithChassisID(value string) *LLDPSpecApplyConfiguration {
	b.ChassisID = &value
	return b
}

// WithSystemName sets the SystemName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SystemName field is set to the value of the last call.
func (b *LLDPSpecApplyConfiguration) WithSystemName(value string) *LLDPSpecApplyConfiguration {
	b.SystemName = &value
	return b
}

// WithSystemDescription sets the SystemDescription field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SystemDescription field is set to the value of the last call.
func (b *LLDPSpecApplyConfiguration) WithSystemDescription(value string) *LLDPSpecApplyConfiguration {
	b.SystemDescription = &value
	return b
}

// WithPortID sets the PortID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PortID field is set to the value of the last call.
func (b *LLDPSpecApplyConfiguration) WithPortID(value string) *LLDPSpecApplyConfiguration {
	b.PortID = &value
	return b
}

// WithPortDescription sets the PortDescription field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PortDescription field is set to the value of the last call.
func (b *LLDPSpecApplyConfiguration) WithPortDescription(value string) *LLDPSpecApplyConfiguration {
	b.PortDescription = &value
	return b
}

// WithCapabilities adds the given value to the Capabilities field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Capabilities field.
func (b *LLDPSpecApplyConfiguration) WithCapabilities(values ...v1alpha4.LLDPCapabilities) *LLDPSpecApplyConfiguration {
	for i := range values {
		b.Capabilities = append(b.Capabilities, values[i])
	}
	return b
}
