// SPDX-FileCopyrightText: 2024 SAP SE or an SAP affiliate company and IronCore contributors
// SPDX-License-Identifier: Apache-2.0

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha4

// IdentityApplyConfiguration represents an declarative configuration of the Identity type for use
// with apply.
type IdentityApplyConfiguration struct {
	SKU          *string                      `json:"sku,omitempty"`
	SerialNumber *string                      `json:"serial_number,omitempty"`
	Asset        *string                      `json:"asset,omitempty"`
	Internal     []InternalApplyConfiguration `json:"internal,omitempty"`
}

// IdentityApplyConfiguration constructs an declarative configuration of the Identity type for use with
// apply.
func Identity() *IdentityApplyConfiguration {
	return &IdentityApplyConfiguration{}
}

// WithSKU sets the SKU field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SKU field is set to the value of the last call.
func (b *IdentityApplyConfiguration) WithSKU(value string) *IdentityApplyConfiguration {
	b.SKU = &value
	return b
}

// WithSerialNumber sets the SerialNumber field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SerialNumber field is set to the value of the last call.
func (b *IdentityApplyConfiguration) WithSerialNumber(value string) *IdentityApplyConfiguration {
	b.SerialNumber = &value
	return b
}

// WithAsset sets the Asset field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Asset field is set to the value of the last call.
func (b *IdentityApplyConfiguration) WithAsset(value string) *IdentityApplyConfiguration {
	b.Asset = &value
	return b
}

// WithInternal adds the given value to the Internal field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Internal field.
func (b *IdentityApplyConfiguration) WithInternal(values ...*InternalApplyConfiguration) *IdentityApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithInternal")
		}
		b.Internal = append(b.Internal, *values[i])
	}
	return b
}
