// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package rules

import (
	"github.com/go-logr/logr"
	"github.com/onmetal/metal-api/types/common"
)

type ServerMustBeDisabledToAccount struct {
	serverExtractor common.ServerExtractor
	log             logr.Logger
}

func NewServerMustBeDisabledToAccountRule(serverExtractor common.ServerExtractor,
	l logr.Logger) *ServerMustBeDisabledToAccount {
	return &ServerMustBeDisabledToAccount{
		serverExtractor: serverExtractor,
		log:             l,
	}
}

func (s *ServerMustBeDisabledToAccount) Disabled(serverMetadata common.Metadata) bool {
	server, err := s.serverExtractor.Get(serverMetadata)
	if err != nil {
		s.log.Info("ServerMustBeDisabledToAccountRule: can't extract server from cluster",
			"error", err)
		return false
	}
	return server.PowerState() == common.ServerPowerStateOff
}
