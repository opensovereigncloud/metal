// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package scenarios

import (
	"github.com/onmetal/metal-api/types/common"
)

type DisableServerInCaseOfErrorUseCase struct {
	serverExtractor common.ServerExtractor
	serverExecutor  common.ServerExecutor
}

func NewDisableServerInCaseOfErrorUseCase(
	serverExtractor common.ServerExtractor,
	serverExecutor common.ServerExecutor) *DisableServerInCaseOfErrorUseCase {
	return &DisableServerInCaseOfErrorUseCase{
		serverExtractor: serverExtractor,
		serverExecutor:  serverExecutor,
	}
}

func (s *DisableServerInCaseOfErrorUseCase) Execute(serverMetadata common.Metadata) error {
	server, err := s.serverExtractor.Get(serverMetadata)
	if err != nil {
		return err
	}

	if alreadyDisabled(server.PowerState()) {
		return nil
	}

	if err := server.ValidatePowerCapabilities().SetPowerState(common.ServerPowerStateOff); err != nil {
		return err
	}
	return s.serverExecutor.Update(server)
}

func alreadyDisabled(powerState common.PowerState) bool {
	return powerState == common.ServerPowerStateOff
}
