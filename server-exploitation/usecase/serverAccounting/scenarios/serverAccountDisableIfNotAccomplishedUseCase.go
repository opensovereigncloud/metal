// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package scenarios

import (
	domain "github.com/onmetal/metal-api/server-exploitation/domain/serverAccounting"
	"github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting/access"
	"github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting/rules"
	"github.com/onmetal/metal-api/types/common"
)

type ServerAccountDisableIfNotAccomplishedUseCase struct {
	accomplished           access.ServerAccountAccomplished
	serverAccountExtractor domain.GetServerAccount
	timeRules              rules.TimeRules
}

func NewServerAccountDisableIfNotAccomplishedUseCase(
	accomplished access.ServerAccountAccomplished,
	serverAccountExtractor domain.GetServerAccount,
	olderThan rules.TimeRules) *ServerAccountDisableIfNotAccomplishedUseCase {
	return &ServerAccountDisableIfNotAccomplishedUseCase{
		accomplished:           accomplished,
		serverAccountExtractor: serverAccountExtractor,
		timeRules:              olderThan,
	}
}

func (s *ServerAccountDisableIfNotAccomplishedUseCase) MustBeDisabled(serverAccountMetadata common.Metadata) bool {
	serverAccount, err := s.serverAccountExtractor.Get(serverAccountMetadata)
	if err != nil {
		return false
	}
	accomplished := s.accomplished.Invoke(serverAccount)
	olderThan := s.timeRules.OlderThan(serverAccount.CreationTimestamp())
	return olderThan && !accomplished
}
