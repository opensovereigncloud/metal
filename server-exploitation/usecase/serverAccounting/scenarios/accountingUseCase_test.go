// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package scenarios_test

import (
	"testing"

	"github.com/onmetal/metal-api/pkg/logger"
	"github.com/onmetal/metal-api/pkg/provider/kubernetes-provider/fake"
	"github.com/onmetal/metal-api/server-exploitation/application/event"
	"github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/serveraccounting"
	usecase "github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting"
	"github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting/dto"
	"github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting/scenarios"
	"github.com/onmetal/metal-api/types/common"
	"github.com/stretchr/testify/assert"
)

var (
	fakeClient, err = fake.NewFakeClient()
	log             = logger.New()
)

func accountingUseCase(a *assert.Assertions) *scenarios.AccountingUseCase {
	a.Nil(err)
	serverAlreadyAccounted := serveraccounting.NewServerAlreadyAccounted(fakeClient, log)
	serverAccountCreator := serveraccounting.NewServerAccountExecutor(fakeClient)
	domainEventPublisher := event.NewDomainEventPublisher(log)
	return scenarios.NewAccountingUseCase(serverAccountCreator, serverAlreadyAccounted, domainEventPublisher)
}

func TestNotAccounted(t *testing.T) {
	t.Parallel()

	a := assert.New(t)

	accounting := accountingUseCase(a)
	metadata := dto.AccountingObject{
		ServerAccountMetaData: common.NewObjectMetadata("fake", "default"),
		ServerMetadata:        common.NewObjectMetadata("fake", "default"),
	}

	a.Nil(accounting.Execute(metadata))
}

func TestAlreadyAccounted(t *testing.T) {
	t.Parallel()

	a := assert.New(t)

	accounting := accountingUseCase(a)

	metadata := dto.AccountingObject{
		ServerAccountMetaData: common.NewObjectMetadata(fake.ExistingInventoryUUID, "default"),
	}
	a.True(usecase.IsServerAlreadyAccounted(accounting.Execute(metadata)))
}
