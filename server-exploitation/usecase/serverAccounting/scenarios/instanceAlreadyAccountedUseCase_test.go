// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package scenarios_test

import (
	"testing"

	"github.com/onmetal/metal-api/pkg/provider/kubernetes-provider/fake"
	"github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/serveraccounting"
	"github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting/scenarios"
	"github.com/onmetal/metal-api/types/common"
	"github.com/stretchr/testify/assert"
)

func instanceAccountingUseCase(a *assert.Assertions) *scenarios.InstanceAccountingUseCase {
	a.Nil(err)
	alreadyAccounted := serveraccounting.NewInstanceAlreadyAccountedExtractor(fakeClient, log)
	serverAccountExtractor := serveraccounting.NewServerAccountExtractor(fakeClient)
	createInstance := serveraccounting.NewInstanceExecutor(fakeClient)
	return scenarios.
		NewInstanceAccountingUseCase(
			serverAccountExtractor,
			alreadyAccounted,
			createInstance,
		)
}

func TestInstanceAlreadyAccounted(t *testing.T) {
	t.Parallel()

	a := assert.New(t)

	accounting := instanceAccountingUseCase(a)

	instanceMetadata := common.NewObjectMetadata(fake.AvailableInstanceUUID, "default")
	a.NotNil(accounting.Execute(instanceMetadata))
}

func TestInstanceNotAccounted(t *testing.T) {
	t.Parallel()

	a := assert.New(t)

	accounting := instanceAccountingUseCase(a)

	instanceMetadata := common.NewObjectMetadata("fake", "default")
	a.NotNil(accounting.Execute(instanceMetadata))
}
