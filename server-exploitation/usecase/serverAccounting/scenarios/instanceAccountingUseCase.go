// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package scenarios

import (
	domain "github.com/onmetal/metal-api/server-exploitation/domain/serverAccounting"
	usecase "github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting"
	"github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting/access"
	"github.com/onmetal/metal-api/types/common"
)

type InstanceAccountingUseCase struct {
	serverAccountExtractor    domain.GetServerAccount
	alreadyAccountedExtractor access.InstanceAlreadyAccountedExtractor
	createInstance            access.InstanceCreator
}

func NewInstanceAccountingUseCase(
	serverAccountExtractor domain.GetServerAccount,
	alreadyAccountedExtractor access.InstanceAlreadyAccountedExtractor,
	createInstance access.InstanceCreator) *InstanceAccountingUseCase {
	return &InstanceAccountingUseCase{
		serverAccountExtractor:    serverAccountExtractor,
		alreadyAccountedExtractor: alreadyAccountedExtractor,
		createInstance:            createInstance,
	}
}

func (c *InstanceAccountingUseCase) Execute(serverAccountMetadata common.Metadata) error {
	serverAccount, err := c.serverAccountExtractor.Get(serverAccountMetadata)
	if err != nil {
		return err
	}
	if c.alreadyAccountedExtractor.AlreadyAccounted(serverAccount) {
		return usecase.InstanceAlreadyAccounted(serverAccountMetadata)
	}
	newInstance, err := c.createInstance.NewInstance(serverAccount)
	if err != nil {
		return err
	}
	return newInstance.Create()
}
