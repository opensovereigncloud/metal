// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package scenarios

import (
	domain "github.com/onmetal/metal-api/server-exploitation/domain/serverAccounting"
	usecase "github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting"
	"github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting/dto"
	"github.com/onmetal/metal-api/types/base"
	"github.com/onmetal/metal-api/types/events"
)

type AccountingUseCase struct {
	serverAccountCreator   domain.CreateServerAccounting
	serverAlreadyAccounted domain.ServerAlreadyAccounted
	domainEventPublisher   events.DomainEventPublisher
}

func NewAccountingUseCase(
	serverAccountCreator domain.CreateServerAccounting,
	serverAlreadyAccounted domain.ServerAlreadyAccounted,
	domainEventPublisher events.DomainEventPublisher) *AccountingUseCase {
	return &AccountingUseCase{
		serverAccountCreator:   serverAccountCreator,
		serverAlreadyAccounted: serverAlreadyAccounted,
		domainEventPublisher:   domainEventPublisher,
	}
}

func (c *AccountingUseCase) Execute(object dto.AccountingObject) error {
	if c.serverAlreadyAccounted.AlreadyAccounted(object.ServerAccountMetaData) {
		return usecase.ServerAlreadyAccounted(object.ServerAccountMetaData)
	}
	serverAccount := c.serverAccountCreator.NewServerAccount(object.ServerAccountMetaData)
	if err := c.serverAccountCreator.Create(serverAccount); err != nil {
		return err
	}

	event := base.NewServerAccountingCreatedDomainEvent(
		object.ServerMetadata.Name(), object.ServerMetadata.Namespace())
	c.domainEventPublisher.Publish(event)

	return nil
}
