// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package scenarios_test

import (
	"testing"
	"time"

	"github.com/onmetal/metal-api/pkg/provider/kubernetes-provider/fake"
	"github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/serveraccounting"
	"github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting/rules"
	"github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting/scenarios"
	"github.com/onmetal/metal-api/types/common"
	"github.com/stretchr/testify/assert"
)

type olderThan struct{}

type notOlderThan struct{}

func (o *olderThan) OlderThan(t time.Time) bool {
	return true
}

func (o *notOlderThan) OlderThan(t time.Time) bool {
	return false
}

func serverAccountDisableIfNotAccomplishedUseCase(r rules.TimeRules) *scenarios.
	ServerAccountDisableIfNotAccomplishedUseCase {
	accomplished := serveraccounting.NewServerAccountAccomplished()
	serverAccountExtractor := serveraccounting.NewServerAccountExtractor(fakeClient)
	return scenarios.NewServerAccountDisableIfNotAccomplishedUseCase(accomplished, serverAccountExtractor, r)
}

func TestMustNotBeDisabledOlderThanAndAccomplished(t *testing.T) {
	t.Parallel()

	a := assert.New(t)

	serverAccountAccomplished := serverAccountDisableIfNotAccomplishedUseCase(&olderThan{})
	metadata := common.NewObjectMetadata(fake.ExistingInventoryUUID, "default")

	a.False(serverAccountAccomplished.MustBeDisabled(metadata))
}

func TestMustBeDisabledOlderAndNotAccomplished(t *testing.T) {
	t.Parallel()

	a := assert.New(t)

	serverAccountAccomplished := serverAccountDisableIfNotAccomplishedUseCase(&olderThan{})
	metadata := common.NewObjectMetadata(fake.NotAccomplishedInventoryUUID, "default")

	a.True(serverAccountAccomplished.MustBeDisabled(metadata))
}

func TestMustNotBeDisabledOlderAndAccomplished(t *testing.T) {
	t.Parallel()

	a := assert.New(t)

	serverAccountAccomplished := serverAccountDisableIfNotAccomplishedUseCase(&olderThan{})
	metadata := common.NewObjectMetadata(fake.ExistingInventoryUUID, "default")

	a.False(serverAccountAccomplished.MustBeDisabled(metadata))
}

func TestMustNotBeDisabledNotOlderThanAndNotAccomplished(t *testing.T) {
	t.Parallel()

	a := assert.New(t)

	serverAccountAccomplished := serverAccountDisableIfNotAccomplishedUseCase(&notOlderThan{})
	metadata := common.NewObjectMetadata(fake.NotAccomplishedInventoryUUID, "default")

	a.False(serverAccountAccomplished.MustBeDisabled(metadata))
}
