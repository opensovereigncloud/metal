// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package usecase

import "errors"

const (
	alreadyAccounted   = "already accounted"
	notExist           = "not exist"
	unableToCommission = "unable to commission"
	notFound           = "not found"
	unknown            = "unknown"
)

type ServerWarehouseError struct {
	Reason  string
	Message string
}

type ServerWarehouseStatus interface {
	Status() string
}

func ReasonForError(err error) string {
	if reason := ServerWarehouseStatus(nil); errors.As(err, &reason) {
		return reason.Status()
	}
	return unknown
}

func (e *ServerWarehouseError) Error() string { return e.Message }

func (e *ServerWarehouseError) Status() string { return e.Reason }

func IsInstanceAlreadyCommissioned(err error) bool {
	return ReasonForError(err) == alreadyAccounted
}

func IsUnableToCommission(err error) bool {
	return ReasonForError(err) == unableToCommission
}

func IsNotExist(err error) bool {
	return ReasonForError(err) == notExist
}

func IsServerNotFound(err error) bool {
	return ReasonForError(err) == notFound
}
