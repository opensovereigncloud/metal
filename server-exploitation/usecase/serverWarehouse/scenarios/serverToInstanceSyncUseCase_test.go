// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package scenarios_test

import (
	"testing"

	"github.com/onmetal/metal-api/pkg/provider/kubernetes-provider/fake"
	kubernetesserver "github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/server"
	"github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/serverwarehouse"
	serverwarehousefake "github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/serverwarehouse/fake"
	"github.com/onmetal/metal-api/server-exploitation/usecase/serverWarehouse/dto"
	"github.com/onmetal/metal-api/server-exploitation/usecase/serverWarehouse/scenarios"
	"github.com/onmetal/metal-api/types/common"
	"github.com/stretchr/testify/assert"
)

func synchronization(a *assert.Assertions) *scenarios.ServerToInstanceSyncUseCase {
	fakeProviderClient, err := fake.NewFakeClient()
	a.Nil(err)
	instanceUpdater := &serverwarehousefake.InstanceUpdater{}
	serverExtractor := kubernetesserver.NewServerExtractor(fakeProviderClient)
	instanceExtractor := serverwarehouse.NewInstanceExtractor(fakeProviderClient)
	syncExecutor := serverwarehouse.NewServerSyncStatusExecutor()
	return scenarios.NewServerToInstanceSyncUseCase(syncExecutor,
		instanceExtractor,
		instanceUpdater,
		serverExtractor,
	)
}

func objectForSynchronization() dto.ObjectForSynchronization {
	serverMetadata := common.NewObjectMetadata(fake.ExistingServerUUID, "default")
	instanceMetadata := common.NewObjectMetadata(fake.AvailableInstanceUUID, "default")
	return dto.ObjectForSynchronization{
		Server:   serverMetadata,
		Instance: instanceMetadata,
	}
}

func TestServerToInstanceSyncUseCase(t *testing.T) {
	t.Parallel()

	a := assert.New(t)

	s := synchronization(a)
	objects := objectForSynchronization()

	a.Nil(s.Execute(objects), "must sync without issue")
}
