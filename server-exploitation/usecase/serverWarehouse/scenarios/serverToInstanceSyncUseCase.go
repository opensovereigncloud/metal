// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package scenarios

import (
	domain "github.com/onmetal/metal-api/server-exploitation/domain/serverWarehouse"
	"github.com/onmetal/metal-api/server-exploitation/usecase/serverWarehouse/access"
	"github.com/onmetal/metal-api/server-exploitation/usecase/serverWarehouse/dto"
	"github.com/onmetal/metal-api/types/common"
)

type ServerToInstanceSyncUseCase struct {
	synchronizationExecutor access.SynchronizationExecutor
	instanceExtractor       domain.InstanceGet
	instanceUpdater         domain.InstanceUpdater
	serverExtractor         common.ServerExtractor
}

func NewServerToInstanceSyncUseCase(
	synchronizationExecutor access.SynchronizationExecutor,
	instanceExtractor domain.InstanceGet,
	instanceUpdater domain.InstanceUpdater,
	serverExtractor common.ServerExtractor,
) *ServerToInstanceSyncUseCase {
	return &ServerToInstanceSyncUseCase{
		synchronizationExecutor: synchronizationExecutor,
		instanceExtractor:       instanceExtractor,
		instanceUpdater:         instanceUpdater,
		serverExtractor:         serverExtractor,
	}
}

func (c *ServerToInstanceSyncUseCase) Execute(objects dto.ObjectForSynchronization) error {
	server, err := c.serverExtractor.Get(objects.Server)
	if err != nil {
		return err
	}
	instance, err := c.instanceExtractor.Get(objects.Instance)
	if err != nil {
		return err
	}
	c.synchronizationExecutor.
		Source(server.DeepObject()).
		Target(instance.DeepObject()).
		SyncTaints().
		SyncSystemState()
	return c.instanceUpdater.Update(instance)
}
