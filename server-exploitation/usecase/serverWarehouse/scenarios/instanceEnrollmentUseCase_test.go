// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package scenarios

import (
	"testing"

	"github.com/onmetal/metal-api/pkg/provider/kubernetes-provider/fake"
	kubernetestpersictence "github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/serverwarehouse"
	usecase "github.com/onmetal/metal-api/server-exploitation/usecase/serverWarehouse"
	"github.com/onmetal/metal-api/types/common"
	"github.com/stretchr/testify/assert"
)

func instanceEnrollment(a *assert.Assertions) usecase.InstanceEnrollmentUseCase {
	k8sFakeClient, err := fake.NewFakeClient()
	a.Nil(err, "InstanceSchedulerUseCase: must create client")
	instanceExtractor := kubernetestpersictence.NewInstanceExtractor(k8sFakeClient)
	serverEnrollment := kubernetestpersictence.NewServerEnrollmentExecutor(k8sFakeClient)
	serverExtractor := kubernetestpersictence.NewServerForInstanceExtractor(k8sFakeClient)
	return NewInstanceEnrollmentUseCase(instanceExtractor, serverEnrollment, serverExtractor)
}

func TestNewInstanceSchedulerUseCaseCheckIn(t *testing.T) {
	t.Parallel()
	a := assert.New(t)
	schedule := instanceEnrollment(a)
	instance := common.NewObjectMetadata(
		fake.ExistingServerUUID,
		"default")
	a.Nil(schedule.Execute(instance), "InstanceSchedulerUseCase: must schedule instance without error")
}

func TestNewInstanceSchedulerUseCaseCheckOut(t *testing.T) {
	t.Parallel()
	a := assert.New(t)
	schedule := instanceEnrollment(a)
	instance := common.NewObjectMetadata(
		fake.AvailableInstanceUUID,
		"default")
	a.Nil(schedule.Execute(instance), "InstanceSchedulerUseCase: must schedule instance without error")
}
