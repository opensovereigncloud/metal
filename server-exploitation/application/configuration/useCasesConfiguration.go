// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package configuration

import (
	"github.com/go-logr/logr"
	serverAccountingRules "github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting/rules"
	serverAccountingScenarios "github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting/scenarios"
	serverWarehouseScenarios "github.com/onmetal/metal-api/server-exploitation/usecase/serverWarehouse/scenarios"
)

func (p *PersistenceConfiguration) serverAccountingUseCase() *serverAccountingScenarios.AccountingUseCase {
	return serverAccountingScenarios.NewAccountingUseCase(
		p.serverAccountCreator,
		p.serverAlreadyAccountedExtractor,
		p.eventPublisher)
}

func (p *PersistenceConfiguration) instanceOwnershipOverServerAccountUseCase() *serverWarehouseScenarios.
	OwnershipUseCase {
	return serverWarehouseScenarios.NewOwnershipUseCase(
		p.instanceExtractor,
		p.serverAccountOwnership)
}

func (p *PersistenceConfiguration) instanceOwnershipOverServerUseCase() *serverWarehouseScenarios.OwnershipUseCase {
	return serverWarehouseScenarios.NewOwnershipUseCase(
		p.instanceExtractor,
		p.serverOwnership)
}

func (p *PersistenceConfiguration) serverMustBeDisabledRule(log logr.Logger) serverAccountingRules.
	ServerMustBeDisabledToAccountRule {
	return serverAccountingRules.NewServerMustBeDisabledToAccountRule(
		p.serverExtractor,
		log)
}

func (p *PersistenceConfiguration) instanceAccountingUseCase() *serverAccountingScenarios.InstanceAccountingUseCase {
	return serverAccountingScenarios.NewInstanceAccountingUseCase(
		p.serverAccountExtractor,
		p.instanceAlreadyAccountedExtractor,
		p.createInstanceFromServerAccount,
	)
}

func (p *PersistenceConfiguration) instanceCommissioningUseCase() *serverWarehouseScenarios.
	InstanceCommissioningUseCase {
	return serverWarehouseScenarios.NewInstanceCommissioningUseCase(
		p.serverAccountExtractor,
		p.instanceCommissioningExecutor,
		p.instanceUpdater,
	)
}

func (p *PersistenceConfiguration) serverSyncStatusUseCase() *serverWarehouseScenarios.ServerToInstanceSyncUseCase {
	return serverWarehouseScenarios.NewServerToInstanceSyncUseCase(
		p.synchronizationExecutor,
		p.instanceExtractor,
		p.instanceUpdater,
		p.serverExtractor)
}

func (p *PersistenceConfiguration) instanceEnrollmentUseCase() *serverWarehouseScenarios.InstanceEnrollmentUseCase {
	return serverWarehouseScenarios.NewInstanceEnrollmentUseCase(
		p.instanceExtractor,
		p.serverEnrollment,
		p.findServerForInstanceExtractor)
}

func (p *PersistenceConfiguration) serverAccountAccomplishedUseCase() *serverAccountingScenarios.
	ServerAccountDisableIfNotAccomplishedUseCase {
	return serverAccountingScenarios.NewServerAccountDisableIfNotAccomplishedUseCase(
		p.serverAccountAccomplished,
		p.serverAccountExtractor,
		p.timeRuleForDisable,
	)
}

func (p *PersistenceConfiguration) disableServerInCaseOfErrorUseCase() *serverAccountingScenarios.
	DisableServerInCaseOfErrorUseCase {
	return serverAccountingScenarios.NewDisableServerInCaseOfErrorUseCase(
		p.serverExtractor,
		p.serverExecutor,
	)
}
