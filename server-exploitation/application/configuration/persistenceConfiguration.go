// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package configuration

import (
	"github.com/go-logr/logr"
	"github.com/onmetal/metal-api/server-exploitation/application/event"
	serverAccountingDomain "github.com/onmetal/metal-api/server-exploitation/domain/serverAccounting"
	serverWarehouseDomain "github.com/onmetal/metal-api/server-exploitation/domain/serverWarehouse"
	serverKubernetespersictence "github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/server"
	saccountingK8spersictence "github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/serveraccounting"
	swarehouseK8spersictence "github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/serverwarehouse"
	serverAccountingAccess "github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting/access"
	serverAccountingRules "github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting/rules"
	serverWarehouseAccess "github.com/onmetal/metal-api/server-exploitation/usecase/serverWarehouse/access"
	"github.com/onmetal/metal-api/types/common"
	"github.com/onmetal/metal-api/types/events"
	ctrlclient "sigs.k8s.io/controller-runtime/pkg/client"
)

type PersistenceConfiguration struct {
	serverExecutor                    common.ServerExecutor
	serverExtractor                   common.ServerExtractor
	findServerForInstanceExtractor    serverWarehouseAccess.FindServer
	instanceCommissioningExecutor     serverWarehouseAccess.InstanceCommissioning
	instanceExtractor                 serverWarehouseAccess.InstanceExtractor
	switchInstanceExtractor           serverWarehouseAccess.InstanceExtractor
	serverAccountExtractor            serverAccountingDomain.GetServerAccount
	serverAccountCreator              serverAccountingDomain.CreateServerAccounting
	serverAlreadyAccountedExtractor   serverAccountingDomain.ServerAlreadyAccounted
	createInstance                    serverWarehouseDomain.InstanceCreator
	createInstanceFromServerAccount   serverAccountingAccess.InstanceCreator
	instanceAlreadyAccountedExtractor serverAccountingAccess.InstanceAlreadyAccountedExtractor
	instanceExecutor                  serverWarehouseAccess.InstanceExecutor
	synchronizationExecutor           serverWarehouseAccess.SynchronizationExecutor
	instanceUpdater                   serverWarehouseDomain.InstanceUpdater
	serverAccountAccomplished         serverAccountingAccess.ServerAccountAccomplished
	serverEnrollment                  serverWarehouseAccess.ServerEnrollment
	eventPublisher                    events.DomainEventPublisher
	timeRuleForDisable                serverAccountingRules.TimeRules
}

// nolint:funlen
func k8sPersistenceConfiguration(
	log logr.Logger, providerClient ctrlclient.Client) *PersistenceConfiguration {
	eventPublisherImpl := event.NewDomainEventPublisher(log)

	serverExecutor := serverKubernetespersictence.NewDryRunServerExecutor(log)
	// serverExecutor := serverKubernetespersictence.NewServerExecutor(providerClient)
	serverExtractor := serverKubernetespersictence.NewServerExtractor(providerClient)

	serverForInstanceExtractor := swarehouseK8spersictence.NewServerForInstanceExtractor(providerClient)

	instanceCommissioningExecutor := swarehouseK8spersictence.NewInstanceCommissioning(providerClient)
	instanceExtractor := swarehouseK8spersictence.NewInstanceExtractor(providerClient)
	switchInstanceExtractor := swarehouseK8spersictence.NewSwitchExtractor(providerClient)

	serverAccountExtractor := saccountingK8spersictence.NewServerAccountExtractor(providerClient)
	serverAccountCreator := saccountingK8spersictence.NewServerAccountExecutor(providerClient)
	serverAlreadyAccountedExtractor := saccountingK8spersictence.NewServerAlreadyAccounted(providerClient, log)

	createInstance := swarehouseK8spersictence.NewInstanceCreator(providerClient)
	createInstanceFromServerAccount := saccountingK8spersictence.NewInstanceExecutor(providerClient)
	instanceAlreadyAccountedExtractor := saccountingK8spersictence.NewInstanceAlreadyAccountedExtractor(
		providerClient,
		log)

	instanceExecutor := saccountingK8spersictence.NewInstanceExecutor(providerClient)

	serverSyncStatusExecutor := swarehouseK8spersictence.NewServerSyncStatusExecutor()

	instanceUpdater := swarehouseK8spersictence.NewInstanceUpdater(providerClient)

	serverAccountAccomplished := saccountingK8spersictence.NewServerAccountAccomplished()

	serverEnrollment := swarehouseK8spersictence.NewServerEnrollmentExecutor(providerClient)

	serverMustBeEnabledOnFirstAppearRule := serverAccountingRules.NewServerMustBeEnabledAfterAccountingRule(
		serverExtractor, serverExecutor, log)

	timeRulesForDisableMinutes := serverAccountingRules.NewTimeRuleNotChangedFor30Minutes()
	eventPublisherImpl.RegisterListeners(serverMustBeEnabledOnFirstAppearRule)

	return &PersistenceConfiguration{
		serverExecutor,
		serverExtractor,
		serverForInstanceExtractor,
		instanceCommissioningExecutor,
		instanceExtractor,
		switchInstanceExtractor,
		serverAccountExtractor,
		serverAccountCreator,
		serverAlreadyAccountedExtractor,
		createInstance,
		createInstanceFromServerAccount,
		instanceAlreadyAccountedExtractor,
		instanceExecutor,
		serverSyncStatusExecutor,
		instanceUpdater,
		serverAccountAccomplished,
		serverEnrollment,
		eventPublisherImpl,
		timeRulesForDisableMinutes,
	}
}
