// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package configuration

import (
	"github.com/go-logr/logr"
	"github.com/onmetal/metal-api/server-exploitation/application/event"
	serverAccountingDomain "github.com/onmetal/metal-api/server-exploitation/domain/serverAccounting"
	serverWarehouseDomain "github.com/onmetal/metal-api/server-exploitation/domain/serverWarehouse"
	"github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/ownership"
	serverKubernetespersictence "github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/server"
	saccountingK8spersictence "github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/serveraccounting"
	swarehouseK8spersictence "github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/serverwarehouse"
	serverAccountingAccess "github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting/access"
	serverAccountingRules "github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting/rules"
	serverWarehouseAccess "github.com/onmetal/metal-api/server-exploitation/usecase/serverWarehouse/access"
	"github.com/onmetal/metal-api/types/common"
	"github.com/onmetal/metal-api/types/events"
	ctrlclient "sigs.k8s.io/controller-runtime/pkg/client"
)

type PersistenceConfiguration struct {
	serverExecutor  common.ServerExecutor
	serverExtractor common.ServerExtractor
	*ServerAccountingConfiguration
	*ServerWarehouseConfiguration
	eventPublisher     events.DomainEventPublisher
	timeRuleForDisable serverAccountingRules.TimeRules
}

type ServerAccountingConfiguration struct {
	serverAccountExtractor            serverAccountingDomain.GetServerAccount
	serverAccountCreator              serverAccountingDomain.CreateServerAccounting
	serverAccountUpdater              serverAccountingDomain.UpdateServerAccount
	serverAlreadyAccountedExtractor   serverAccountingDomain.ServerAlreadyAccounted
	createInstanceFromServerAccount   serverAccountingAccess.InstanceCreator
	instanceAlreadyAccountedExtractor serverAccountingAccess.InstanceAlreadyAccountedExtractor
	serverAccountAccomplished         serverAccountingAccess.ServerAccountAccomplished
}

type ServerWarehouseConfiguration struct {
	findServerForInstanceExtractor serverWarehouseAccess.FindServer
	instanceCommissioningExecutor  serverWarehouseAccess.InstanceCommissioning
	instanceExtractor              serverWarehouseAccess.InstanceExtractor
	switchInstanceExtractor        serverWarehouseAccess.InstanceExtractor
	createInstance                 serverWarehouseDomain.InstanceCreator
	instanceExecutor               serverWarehouseAccess.InstanceExecutor
	synchronizationExecutor        serverWarehouseAccess.SynchronizationExecutor
	instanceUpdater                serverWarehouseDomain.InstanceUpdater
	serverEnrollment               serverWarehouseAccess.ServerEnrollment
	serverAccountOwnership         serverWarehouseAccess.NewInstanceOwnership
	serverOwnership                serverWarehouseAccess.NewInstanceOwnership
}

func k8sPersistenceConfiguration(
	log logr.Logger, providerClient ctrlclient.Client) *PersistenceConfiguration {
	eventPublisherImpl := event.NewDomainEventPublisher(log)

	serverExecutor := serverKubernetespersictence.NewDryRunServerExecutor(log)
	// serverExecutor := serverKubernetespersictence.NewServerExecutor(providerClient)
	serverExtractor := serverKubernetespersictence.NewServerExtractor(providerClient)

	serverMustBeEnabledOnFirstAppearRule := serverAccountingRules.NewServerMustBeEnabledAfterAccountingRule(
		serverExtractor, serverExecutor, log)

	timeRulesForDisableMinutes := serverAccountingRules.NewTimeRuleNotChangedFor30Minutes()
	eventPublisherImpl.RegisterListeners(serverMustBeEnabledOnFirstAppearRule)

	accountingConfiguration := serverAccountingConfiguration(
		providerClient,
		log,
	)
	warehouseConfiguration := serverWarehouseConfiguration(
		providerClient,
		serverExtractor,
		serverExecutor,
		accountingConfiguration.serverAccountExtractor,
		accountingConfiguration.serverAccountUpdater)
	return &PersistenceConfiguration{
		serverExecutor,
		serverExtractor,
		accountingConfiguration,
		warehouseConfiguration,
		eventPublisherImpl,
		timeRulesForDisableMinutes,
	}
}

func serverAccountingConfiguration(providerClient ctrlclient.Client,
	log logr.Logger) *ServerAccountingConfiguration {
	serverAccountExtractor := saccountingK8spersictence.NewServerAccountExtractor(providerClient)
	serverAccountExecutor := saccountingK8spersictence.NewServerAccountExecutor(providerClient)
	serverAlreadyAccountedExtractor := saccountingK8spersictence.NewServerAlreadyAccounted(providerClient, log)
	createInstanceFromServerAccount := saccountingK8spersictence.NewInstanceExecutor(providerClient)
	instanceAlreadyAccountedExtractor := saccountingK8spersictence.NewInstanceAlreadyAccountedExtractor(
		providerClient,
		log)
	serverAccountAccomplished := saccountingK8spersictence.NewServerAccountAccomplished()

	return &ServerAccountingConfiguration{
		serverAccountExtractor:            serverAccountExtractor,
		serverAccountCreator:              serverAccountExecutor,
		serverAlreadyAccountedExtractor:   serverAlreadyAccountedExtractor,
		createInstanceFromServerAccount:   createInstanceFromServerAccount,
		instanceAlreadyAccountedExtractor: instanceAlreadyAccountedExtractor,
		serverAccountAccomplished:         serverAccountAccomplished,
		serverAccountUpdater:              serverAccountExecutor,
	}
}

func serverWarehouseConfiguration(providerClient ctrlclient.Client,
	serverExtractor common.ServerExtractor,
	serverExecutor common.ServerExecutor,
	getServerAccount serverAccountingDomain.GetServerAccount,
	updateServerAccount serverAccountingDomain.UpdateServerAccount) *ServerWarehouseConfiguration {
	serverForInstanceExtractor := swarehouseK8spersictence.NewServerForInstanceExtractor(providerClient)
	instanceCommissioningExecutor := swarehouseK8spersictence.NewInstanceCommissioning(providerClient)
	instanceExtractor := swarehouseK8spersictence.NewInstanceExtractor(providerClient)
	switchInstanceExtractor := swarehouseK8spersictence.NewSwitchExtractor(providerClient)
	createInstance := swarehouseK8spersictence.NewInstanceCreator(providerClient)
	instanceExecutor := saccountingK8spersictence.NewInstanceExecutor(providerClient)
	serverSyncStatusExecutor := swarehouseK8spersictence.NewServerSyncStatusExecutor()
	instanceUpdater := swarehouseK8spersictence.NewInstanceUpdater(providerClient)
	serverEnrollment := swarehouseK8spersictence.NewServerEnrollmentExecutor(providerClient)
	serverOwnership := ownership.NewServerOwnershipExecutor(serverExtractor, serverExecutor)
	serverAccountOwnership := ownership.NewServerAccountOwnershipExecutor(getServerAccount, updateServerAccount)
	return &ServerWarehouseConfiguration{
		findServerForInstanceExtractor: serverForInstanceExtractor,
		instanceCommissioningExecutor:  instanceCommissioningExecutor,
		instanceExtractor:              instanceExtractor,
		switchInstanceExtractor:        switchInstanceExtractor,
		createInstance:                 createInstance,
		instanceExecutor:               instanceExecutor,
		synchronizationExecutor:        serverSyncStatusExecutor,
		instanceUpdater:                instanceUpdater,
		serverEnrollment:               serverEnrollment,
		serverOwnership:                serverOwnership,
		serverAccountOwnership:         serverAccountOwnership,
	}
}
