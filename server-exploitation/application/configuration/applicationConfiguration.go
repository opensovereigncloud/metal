// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package configuration

import (
	"flag"
	"os"
)

type configuration struct {
	metricsAddr          string
	enableLeaderElection bool
	probeAddr            string
	targetNamespace      string
}

func newConfiguration() configuration {
	var metricsAddr string
	var enableLeaderElection bool
	var probeAddr string
	var targetNamespace string

	flag.StringVar(&metricsAddr, "metrics-bind-address", ":8080", "The address the metric endpoint binds to.")
	flag.StringVar(&probeAddr, "health-probe-bind-address", ":8081", "The address the probe endpoint binds to.")
	flag.StringVar(&targetNamespace, "target-namespace", defaultTargetNamespace(),
		"Namespace where every new object belongs.")
	flag.BoolVar(&enableLeaderElection, "leader-elect", false,
		"Enable leader election for controller manager. "+
			"Enabling this will ensure there is only one active controller manager.")
	flag.Parse()

	return configuration{
		metricsAddr:          metricsAddr,
		enableLeaderElection: enableLeaderElection,
		probeAddr:            probeAddr,
		targetNamespace:      targetNamespace,
	}
}

func defaultTargetNamespace() string {
	namespace := os.Getenv("NAMESPACE")
	if namespace == "" {
		return "default"
	}
	return namespace
}
