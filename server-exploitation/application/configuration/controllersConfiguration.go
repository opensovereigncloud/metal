// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package configuration

import (
	"github.com/go-logr/logr"
	kubernetesmanager "github.com/onmetal/metal-api/pkg/manager/kubernetes"
	serverAccountingControllers "github.com/onmetal/metal-api/server-exploitation/controllers/serverAccounting"
	serverWarehouseControllers "github.com/onmetal/metal-api/server-exploitation/controllers/serverWarehouse"
)

type controllers struct {
	log             logr.Logger
	k8sManager      *kubernetesmanager.ControllerManager
	configuration   *PersistenceConfiguration
	targetNamespace string
}

func newControllers(log logr.Logger,
	k8sManager *kubernetesmanager.ControllerManager,
	configuration *PersistenceConfiguration,
	targetNamespace string) *controllers {
	return &controllers{
		log:             log,
		k8sManager:      k8sManager,
		configuration:   configuration,
		targetNamespace: targetNamespace,
	}
}

func (c *controllers) register() error {
	if err := c.registerServerAccountingControllers(); err != nil {
		return err
	}
	if err := c.registerServerWarehouseControllers(); err != nil {
		return err
	}
	return nil
}

func (c *controllers) registerServerAccountingControllers() error {
	if err := serverAccountingControllers.NewServerAccounting(
		c.log.WithName("ServerAccountingController"),
		c.configuration.serverAccountingUseCase(),
		c.configuration.serverMustBeDisabledRule(c.log),
		c.targetNamespace,
	).SetupWithManager(c.k8sManager.Manager); err != nil {
		return err
	}
	if err := serverAccountingControllers.NewServerAccountingNotAccomplished(
		c.log.WithName("ServerAccountingNotAccomplishedController"),
		c.configuration.serverAccountAccomplishedUseCase(),
		c.configuration.disableServerInCaseOfErrorUseCase(),
		c.targetNamespace,
	).SetupWithManager(c.k8sManager.Manager); err != nil {
		return err
	}
	if err := serverAccountingControllers.NewInstanceAccounting(
		c.log.WithName("InstanceAccountingController"),
		c.configuration.instanceAccountingUseCase(),
	).SetupWithManager(c.k8sManager.Manager); err != nil {
		return err
	}
	return nil
}

func (c *controllers) registerServerWarehouseControllers() error {
	if err := serverWarehouseControllers.NewCommissioningController(
		c.log.WithName("InstanceCommissioningController"),
		c.configuration.instanceCommissioningUseCase(),
	).SetupWithManager(c.k8sManager.Manager); err != nil {
		return err
	}
	if err := serverWarehouseControllers.NewInstanceOwnership(
		c.log.WithName("InstanceCommissioningController"),
		c.configuration.instanceOwnershipUseCase(),
	).SetupWithManager(c.k8sManager.Manager); err != nil {
		return err
	}
	if err := serverWarehouseControllers.NewServerToInstanceSync(
		c.log.WithName("ServerToInstanceSyncController"),
		c.configuration.serverSyncStatusUseCase(),
		c.targetNamespace,
	).SetupWithManager(c.k8sManager.Manager); err != nil {
		return err
	}
	if err := serverWarehouseControllers.NewInstanceEnrollment(
		c.log.WithName("InstanceEnrollment"),
		c.configuration.instanceEnrollmentUseCase(),
	).SetupWithManager(c.k8sManager.Manager); err != nil {
		return err
	}
	return nil
}
