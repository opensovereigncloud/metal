// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package event

import (
	"github.com/go-logr/logr"
	"github.com/onmetal/metal-api/types/base"
	"github.com/onmetal/metal-api/types/events"
)

type DomainEventPublisher struct {
	listeners map[base.EventType]events.DomainEventListener
	log       logr.Logger
}

func NewDomainEventPublisher(log logr.Logger) *DomainEventPublisher {
	listeners := make(map[base.EventType]events.DomainEventListener)
	return &DomainEventPublisher{
		listeners: listeners,
		log:       log,
	}
}

func (d *DomainEventPublisher) RegisterListeners(
	domainEventListeners ...events.DomainEventListener) {
	for _, domainEventListener := range domainEventListeners {
		eventType := domainEventListener.EventType()
		eventListener := domainEventListener
		d.listeners[eventType] = eventListener
	}
}

func (d *DomainEventPublisher) Publish(events ...base.DomainEvent) {
	for _, event := range events {
		listener, ok := d.listeners[event.EventType()]
		if !ok {
			d.log.Info("listener for event not found", "event", event.EventType())
			continue
		}
		d.log.Info("event published", "listener", listener.EventType())
		listener.Handle(event)
	}
}
