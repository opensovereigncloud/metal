// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package event_test

import (
	"log"
	"testing"

	"github.com/onmetal/metal-api/pkg/logger"
	"github.com/onmetal/metal-api/server-exploitation/application/event"
	"github.com/onmetal/metal-api/types/base"
	"github.com/onmetal/metal-api/types/events"
	"github.com/stretchr/testify/assert"
)

func registerListeners() events.DomainEventPublisher {
	log := logger.New()
	testListener := &listener{}
	eventPublisher := event.NewDomainEventPublisher(log)
	eventPublisher.RegisterListeners(testListener)
	return eventPublisher
}

func eventForTest() []base.DomainEvent {
	testServerMetadata := newListener("server", "default")
	testInstanceMetadata := newAnotherEventTest("instance", "default")
	return []base.DomainEvent{
		testServerMetadata,
		testInstanceMetadata,
	}
}

func TestDomainEventPublisher(t *testing.T) {
	t.Parallel()
	a := assert.New(t)

	publisher := registerListeners()
	a.NotNil(publisher, "must create publishers")

	domainEventsForTest := eventForTest()
	publisher.Publish(domainEventsForTest...)
}

type listener struct {
	name, namespace string
}

func newListener(name, namespace string) base.DomainEvent {
	return &listener{name: name, namespace: namespace}
}

func (d *listener) EventType() base.EventType {
	return "listener"
}

func (d *listener) Handle(event base.DomainEvent) {
	if event.Name() != "server" || event.Namespace() != "default" {
		log.Fatal("ServerMustBeEnabledOnFirstAppearRule failed, incorrect name or namespace")
	}
}

func (d *listener) Name() string {
	return d.name
}

func (d *listener) Namespace() string {
	return d.namespace
}

type anotherEventTest struct {
	name, namespace string
}

func newAnotherEventTest(name, namespace string) base.DomainEvent {
	return &anotherEventTest{
		name:      name,
		namespace: namespace,
	}
}

func (d *anotherEventTest) EventType() base.EventType {
	return "anotherEventTest"
}

func (d *anotherEventTest) Handle(_ base.DomainEvent) {
	log.Fatal("anotherEventTest must not proceed")
}

func (d *anotherEventTest) Name() string {
	return d.name
}

func (d *anotherEventTest) Namespace() string {
	return d.namespace
}
