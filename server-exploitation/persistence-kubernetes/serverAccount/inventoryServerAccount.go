// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package serveraccount

import (
	"time"

	inventoriesv1alpha1 "github.com/onmetal/metal-api/apis/inventory/v1alpha1"
	kuberneteserrors "github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/errors"
	"github.com/onmetal/metal-api/types/common"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
)

type InventoryServerAccount struct {
	serverAccount *inventoriesv1alpha1.Inventory
}

func NewInventoryServerAccount(serverAccount *inventoriesv1alpha1.Inventory) *InventoryServerAccount {
	return &InventoryServerAccount{
		serverAccount: serverAccount,
	}
}

func (i *InventoryServerAccount) Name() string {
	return i.serverAccount.GetName()
}

func (i *InventoryServerAccount) Hostname() string {
	return i.serverAccount.Spec.Host.Name
}

func (i *InventoryServerAccount) Namespace() string {
	return i.serverAccount.GetNamespace()
}

func (i *InventoryServerAccount) UID() string {
	return string(i.serverAccount.UID)
}

func (i *InventoryServerAccount) APIVersion() string {
	return i.serverAccount.APIVersion
}

func (i *InventoryServerAccount) OwnerReferences() []common.OwnerReference {
	serverOwnerReference := i.serverAccount.GetOwnerReferences()
	serverOwnerReferenceLength := len(serverOwnerReference)
	if serverOwnerReferenceLength == 0 {
		return nil
	}
	ownerReference := make([]common.OwnerReference, 0, serverOwnerReferenceLength)
	for o := range serverOwnerReference {
		ownerReference = append(ownerReference, common.OwnerReference{
			Name:       serverOwnerReference[o].Name,
			Kind:       serverOwnerReference[o].Kind,
			APIVersion: serverOwnerReference[o].APIVersion,
			UniqueID:   string(serverOwnerReference[o].UID),
		})
	}
	return ownerReference
}

func (i *InventoryServerAccount) SetOwnerReference(reference common.OwnerReference) {
	i.serverAccount.OwnerReferences = append(i.serverAccount.OwnerReferences, metav1.OwnerReference{
		Name:       reference.Name,
		Kind:       reference.Kind,
		APIVersion: reference.APIVersion,
		UID:        types.UID(reference.UniqueID),
	})
}

func (i *InventoryServerAccount) Labels() map[string]string {
	return i.serverAccount.GetLabels()
}

func (i *InventoryServerAccount) SetNamespace(namespace string) {
	i.serverAccount.SetNamespace(namespace)
}

func (i *InventoryServerAccount) DeepObject() any {
	return i.serverAccount
}

func (i *InventoryServerAccount) ReadyState() string {
	return i.serverAccount.Status.InventoryStatuses.ReadyState
}

func (i *InventoryServerAccount) SetReadyState(state string) {
	i.serverAccount.Status.InventoryStatuses.ReadyState = state
}

func (i *InventoryServerAccount) CreationTimestamp() time.Time {
	return i.serverAccount.GetCreationTimestamp().Time
}

func TranslateServerAccountToInventoryType(serverAccount common.ValueObject) (*inventoriesv1alpha1.Inventory, error) {
	inventory, ok := serverAccount.(*inventoriesv1alpha1.Inventory)
	if !ok {
		return nil, kuberneteserrors.ErrServerAccountTypeCast
	}
	return inventory, nil
}
