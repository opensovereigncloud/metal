// /*
// Copyright (c) 2021 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package serveraccounting

import (
	"context"

	domainServerAccounting "github.com/onmetal/metal-api/server-exploitation/domain/serverAccounting"
	domain "github.com/onmetal/metal-api/server-exploitation/domain/serverWarehouse"
	kuberneteserrors "github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/errors"
	"github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/instance"
	"github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting/access"
	ctrlclient "sigs.k8s.io/controller-runtime/pkg/client"
)

type InstanceExecutor struct {
	client ctrlclient.Client
}

func NewInstanceExecutor(c ctrlclient.Client) *InstanceExecutor {
	return &InstanceExecutor{
		client: c,
	}
}

func (i *InstanceExecutor) NewInstance(
	account domainServerAccounting.ServerAccount) (access.InstanceExecutor, error) {
	instanceCreator, err := instance.NewInstanceAccounting(account)
	if err != nil {
		return nil, err
	}
	newInstance := instanceCreator.NewInstance()
	deepObject, ok := newInstance.DeepObject().(ctrlclient.Object)
	if !ok {
		return nil, kuberneteserrors.ErrTypeCast
	}
	return NewInstanceCreator(i.client, deepObject), nil
}

func (i *InstanceExecutor) Delete(instance domain.Instance) error {
	deepObject, ok := instance.DeepObject().(ctrlclient.Object)
	if !ok {
		return kuberneteserrors.ErrTypeCast
	}
	return i.client.
		Delete(
			context.Background(),
			deepObject)
}
