// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package serveraccounting_test

import (
	"testing"

	"github.com/onmetal/metal-api/pkg/provider/kubernetes-provider/fake"
	domain "github.com/onmetal/metal-api/server-exploitation/domain/serverAccounting"
	"github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/serveraccounting"
	"github.com/onmetal/metal-api/types/common"
	"github.com/stretchr/testify/assert"
)

func instanceAlreadyAccounted() *serveraccounting.InstanceAlreadyAccountedExtractor {
	return serveraccounting.NewInstanceAlreadyAccountedExtractor(fakeClient, log)
}

func serverAccount(metadata common.Metadata) (domain.ServerAccount, error) {
	s := serveraccounting.NewServerAccountExtractor(fakeClient)
	return s.Get(metadata)
}

func TestAlreadyAccounted(t *testing.T) {
	t.Parallel()

	a := assert.New(t)

	metadata := common.NewObjectMetadata(fake.ExistingInventoryUUID, "default")
	sa, err := serverAccount(metadata)
	a.Nil(err)
	a.NotNil(sa)

	alreadyAccounted := instanceAlreadyAccounted()
	a.NotNil(alreadyAccounted)
	a.True(alreadyAccounted.AlreadyAccounted(sa))
}
