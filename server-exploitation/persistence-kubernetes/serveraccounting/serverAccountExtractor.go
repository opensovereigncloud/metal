// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package serveraccounting

import (
	"context"

	inventoriesv1alpha1 "github.com/onmetal/metal-api/apis/inventory/v1alpha1"
	domain "github.com/onmetal/metal-api/server-exploitation/domain/serverAccounting"
	serveraccount "github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/serverAccount"
	"github.com/onmetal/metal-api/types/common"
	"k8s.io/apimachinery/pkg/types"
	ctrlclient "sigs.k8s.io/controller-runtime/pkg/client"
)

type ServerAccountExtractor struct {
	client ctrlclient.Client
}

func NewServerAccountExtractor(c ctrlclient.Client) *ServerAccountExtractor {
	return &ServerAccountExtractor{
		client: c,
	}
}

func (s *ServerAccountExtractor) Get(serverAccount common.Metadata) (domain.ServerAccount, error) {
	inventory := &inventoriesv1alpha1.Inventory{}
	if err := s.client.
		Get(
			context.Background(),
			types.NamespacedName{
				Namespace: serverAccount.Namespace(),
				Name:      serverAccount.Name(),
			}, inventory); err != nil {
		return nil, err
	}
	return serveraccount.NewInventoryServerAccount(inventory), nil
}
