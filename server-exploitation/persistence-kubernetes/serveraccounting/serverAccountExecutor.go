// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package serveraccounting

import (
	"context"

	inventoriesv1alpha1 "github.com/onmetal/metal-api/apis/inventory/v1alpha1"
	domain "github.com/onmetal/metal-api/server-exploitation/domain/serverAccounting"
	kuberneteserrors "github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/errors"
	serveraccount "github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/serverAccount"
	"github.com/onmetal/metal-api/types/common"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	ctrlclient "sigs.k8s.io/controller-runtime/pkg/client"
)

type ServerAccountExecutor struct {
	client ctrlclient.Client
}

func NewServerAccountExecutor(c ctrlclient.Client) *ServerAccountExecutor {
	return &ServerAccountExecutor{
		client: c,
	}
}

func (s *ServerAccountExecutor) NewServerAccount(metadata common.Metadata) domain.ServerAccount {
	serverAccount := prepareInventory(metadata)
	return serveraccount.NewInventoryServerAccount(serverAccount)
}

func (s *ServerAccountExecutor) Create(serverAccount domain.ServerAccount) error {
	deepObject, ok := serverAccount.DeepObject().(ctrlclient.Object)
	if !ok {
		return kuberneteserrors.ErrServerAccountTypeCast
	}
	if err := s.client.
		Create(
			context.Background(),
			deepObject); err != nil {
		return err
	}
	return nil
}

func (s *ServerAccountExecutor) Delete(serverAccount domain.ServerAccount) error {
	deepObject, ok := serverAccount.DeepObject().(ctrlclient.Object)
	if !ok {
		return kuberneteserrors.ErrServerAccountTypeCast
	}
	return s.client.
		Delete(
			context.Background(),
			deepObject)
}

func prepareInventory(i common.Metadata) *inventoriesv1alpha1.Inventory {
	return &inventoriesv1alpha1.Inventory{
		ObjectMeta: metav1.ObjectMeta{
			Name:      i.Name(),
			Namespace: i.Namespace(),
		},
		Spec: inventoriesv1alpha1.InventorySpec{
			Host: &inventoriesv1alpha1.HostSpec{
				Name: "",
			},
		},
	}
}
