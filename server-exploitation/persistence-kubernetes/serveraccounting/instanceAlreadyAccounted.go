// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package serveraccounting

import (
	"context"

	"github.com/go-logr/logr"
	machinev1alpaha2 "github.com/onmetal/metal-api/apis/machine/v1alpha2"
	switchv1beta1 "github.com/onmetal/metal-api/apis/switch/v1beta1"
	domain "github.com/onmetal/metal-api/server-exploitation/domain/serverAccounting"
	"github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/classificator"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/types"
	ctrlclient "sigs.k8s.io/controller-runtime/pkg/client"
)

type InstanceAlreadyAccountedExtractor struct {
	client ctrlclient.Client
	log    logr.Logger
}

func NewInstanceAlreadyAccountedExtractor(c ctrlclient.Client, l logr.Logger) *InstanceAlreadyAccountedExtractor {
	return &InstanceAlreadyAccountedExtractor{
		client: c,
		log:    l,
	}
}

func (e *InstanceAlreadyAccountedExtractor) AlreadyAccounted(serverAccount domain.ServerAccount) bool {
	instanceClassificator := classificator.NewInstanceClassificationByLabel(serverAccount.Labels())
	switch {
	case instanceClassificator.IsMachine():
		instance := &machinev1alpaha2.Machine{}
		return e.isInstanceAccounted(serverAccount.Name(), serverAccount.Namespace(), instance)
	case instanceClassificator.IsSwitch():
		instance := &switchv1beta1.Switch{}
		return e.isInstanceAccounted(serverAccount.Hostname(), serverAccount.Namespace(), instance)
	}
	return true
}

func (e *InstanceAlreadyAccountedExtractor) isInstanceAccounted(
	name, namespace string,
	instance ctrlclient.Object) bool {
	err := e.client.Get(context.Background(), types.NamespacedName{
		Namespace: namespace,
		Name:      name,
	}, instance)
	if apierrors.IsNotFound(err) {
		return false
	}
	if err != nil {
		e.log.V(1).Info("InstanceAlreadyAccountedExtractor extractor failed", "error", err)
		return false
	}
	return true
}
