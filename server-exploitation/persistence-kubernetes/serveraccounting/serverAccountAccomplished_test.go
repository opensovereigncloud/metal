// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package serveraccounting_test

import (
	"testing"

	"github.com/onmetal/metal-api/pkg/provider/kubernetes-provider/fake"
	"github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/serveraccounting"
	"github.com/stretchr/testify/assert"
)

func accomplished(a *assert.Assertions) *serveraccounting.ServerAccountAccomplished {
	a.Nil(clientErr, "must create fake client")
	return serveraccounting.NewServerAccountAccomplished()
}

func TestAccomplished(t *testing.T) {
	t.Parallel()
	a := assert.New(t)

	accountAccomplished := accomplished(a)
	account := serverAccountMetadata(a, fake.NotAccomplishedInventoryUUID)

	accountExtractor := extractor(a)
	sa, err := accountExtractor.Get(account)
	a.Nil(err, "must be nil")
	a.NotNil(sa, "server account must not be empty")

	a.False(accountAccomplished.Invoke(sa))
}
