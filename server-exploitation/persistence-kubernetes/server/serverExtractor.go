// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package server

import (
	"context"

	"github.com/go-logr/logr"
	"github.com/onmetal/metal-api/types/common"
	oobv1 "github.com/onmetal/oob-operator/api/v1alpha1"
	"k8s.io/apimachinery/pkg/types"
	ctrlclient "sigs.k8s.io/controller-runtime/pkg/client"
)

type ServerExtractor struct {
	client ctrlclient.Client
}

type DryRunServerExtractor struct {
	client ctrlclient.Client
	log    logr.Logger
}

func NewServerExtractor(c ctrlclient.Client) *ServerExtractor {
	return &ServerExtractor{
		client: c,
	}
}

func NewDryRunServerExtractor(l logr.Logger, c ctrlclient.Client) *DryRunServerExtractor {
	return &DryRunServerExtractor{
		client: c,
		log:    l,
	}
}

func (s *ServerExtractor) Get(serverMetadata common.Metadata) (common.Server, error) {
	oobServer := &oobv1.OOB{}
	if err := s.client.
		Get(context.Background(), types.NamespacedName{
			Namespace: serverMetadata.Namespace(),
			Name:      serverMetadata.Name(),
		}, oobServer); err != nil {
		return nil, err
	}
	return NewOOBServer(oobServer), nil
}

func (s *DryRunServerExtractor) Get(serverMetadata common.Metadata) (common.Server, error) {
	oobServer := &oobv1.OOB{}
	if err := s.client.Get(context.Background(), types.NamespacedName{
		Namespace: serverMetadata.Namespace(),
		Name:      serverMetadata.Name(),
	}, oobServer); err != nil {
		return nil, err
	}
	return NewDryRunOOBServer(s.log, oobServer), nil
}
