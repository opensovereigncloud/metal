// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package server

import (
	"github.com/go-logr/logr"
	machinev1alpaha2 "github.com/onmetal/metal-api/apis/machine/v1alpha2"
	"github.com/onmetal/metal-api/types/common"
	oobv1 "github.com/onmetal/oob-operator/api/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/utils/pointer"
)

type OOBServer struct {
	server       *oobv1.OOB
	hasPowerCaps bool
}

type DryRunOOBServer struct {
	log          logr.Logger
	server       *oobv1.OOB
	hasPowerCaps bool
}

func NewOOBServer(server *oobv1.OOB) *OOBServer {
	server.Labels = setupLabelForDiscovery(server.Labels, server.Status.UUID)
	return &OOBServer{
		server: server,
	}
}

func setupLabelForDiscovery(labels map[string]string, uuid string) map[string]string {
	if labels == nil {
		labels = make(map[string]string)
	}
	if _, ok := labels[machinev1alpaha2.UUIDLabel]; !ok {
		labels[machinev1alpaha2.UUIDLabel] = uuid
	}
	return labels
}

func NewDryRunOOBServer(l logr.Logger, server *oobv1.OOB) *DryRunOOBServer {
	return &DryRunOOBServer{
		log:    l,
		server: server,
	}
}

func (s *OOBServer) Name() string {
	return s.server.GetName()
}

func (s *OOBServer) Namespace() string {
	return s.server.GetNamespace()
}

func (s *OOBServer) UID() string {
	return string(s.server.UID)
}

func (s *OOBServer) APIVersion() string {
	return s.server.APIVersion
}

func (s *OOBServer) OwnerReferences() []common.OwnerReference {
	serverOwnerReference := s.server.GetOwnerReferences()
	serverOwnerReferenceLength := len(serverOwnerReference)
	if serverOwnerReferenceLength == 0 {
		return nil
	}
	ownerReference := make([]common.OwnerReference, 0, serverOwnerReferenceLength)
	for o := range serverOwnerReference {
		ownerReference = append(ownerReference, common.OwnerReference{
			Name: serverOwnerReference[o].Name,
			Kind: serverOwnerReference[o].Kind,
		})
	}
	return ownerReference
}

func (s *OOBServer) SetOwnerReference(reference common.OwnerReference) {
	s.server.OwnerReferences = append(s.server.OwnerReferences, metav1.OwnerReference{
		Name:       reference.Name,
		Kind:       reference.Kind,
		APIVersion: reference.APIVersion,
		UID:        types.UID(reference.UniqueID),
		Controller: pointer.Bool(false),
	})
}

func (s *OOBServer) Labels() map[string]string {
	return s.server.GetLabels()
}

func (s *OOBServer) SetNamespace(namespace string) {
	s.server.SetNamespace(namespace)
}

func (s *OOBServer) ValidatePowerCapabilities() common.Power {
	s.hasPowerCaps = false
	for _, caps := range s.server.Status.Capabilities {
		if caps != "power" {
			continue
		}
		s.hasPowerCaps = true
		return s
	}
	return s
}

func (s *OOBServer) SetPowerState(powerState common.PowerState) error {
	if !s.hasPowerCaps {
		return ErrHasNoPowerCapabilities
	}
	s.server.Spec.Power = string(powerState)
	return nil
}

func (s *OOBServer) PowerState() common.PowerState {
	return common.PowerState(s.server.Spec.Power)
}

func (s *OOBServer) DeepObject() any {
	return s.server
}

func (d *DryRunOOBServer) Name() string {
	return d.server.Name
}

func (d *DryRunOOBServer) Namespace() string {
	return d.server.Namespace
}

func (d *DryRunOOBServer) UID() string {
	return string(d.server.UID)
}

func (d *DryRunOOBServer) APIVersion() string {
	return d.server.APIVersion
}

func (d *DryRunOOBServer) OwnerReferences() []common.OwnerReference {
	serverOwnerReference := d.server.GetOwnerReferences()
	serverOwnerReferenceLength := len(serverOwnerReference)
	if serverOwnerReferenceLength == 0 {
		return nil
	}
	ownerReference := make([]common.OwnerReference, 0, serverOwnerReferenceLength)
	for o := range serverOwnerReference {
		ownerReference = append(ownerReference, common.OwnerReference{
			Name: serverOwnerReference[o].Name,
			Kind: serverOwnerReference[o].Kind,
		})
	}
	return ownerReference
}

func (d *DryRunOOBServer) SetOwnerReference(reference common.OwnerReference) {
	d.server.OwnerReferences = append(d.server.OwnerReferences, metav1.OwnerReference{
		Name: reference.Name,
		Kind: reference.Kind,
	})
}

func (d *DryRunOOBServer) Labels() map[string]string {
	return d.server.GetLabels()
}

func (d *DryRunOOBServer) SetNamespace(namespace string) {
	d.log.Info("DryRunServerExtractor: server namespace changed",
		"new namespace", namespace,
		"server", d.server.Name)
}

func (d *DryRunOOBServer) ValidatePowerCapabilities() common.Power {
	d.hasPowerCaps = false
	for _, caps := range d.server.Status.Capabilities {
		if caps != "power" {
			continue
		}
		d.hasPowerCaps = true
		return d
	}
	return d
}

func (d *DryRunOOBServer) SetPowerState(powerState common.PowerState) error {
	if !d.hasPowerCaps {
		return ErrHasNoPowerCapabilities
	}
	d.log.Info("DryRunServerExtractor: server power state changed",
		"new state", powerState,
		"server", d.server.Name)
	return nil
}

func (d *DryRunOOBServer) PowerState() common.PowerState {
	return common.PowerState(d.server.Spec.Power)
}

func (d *DryRunOOBServer) DeepObject() any {
	return d.server
}
