// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package switches

import (
	switchv1beta1 "github.com/onmetal/metal-api/apis/switch/v1beta1"
	"github.com/onmetal/metal-api/types/common"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type Instance struct {
	instance *switchv1beta1.Switch
}

func NewSwitchInstance(instance *switchv1beta1.Switch) *Instance {
	return &Instance{
		instance: instance}
}

func (i *Instance) Name() string {
	return i.instance.GetName()
}

func (i *Instance) Namespace() string {
	return i.instance.GetNamespace()
}

func (i *Instance) UID() string {
	return string(i.instance.UID)
}

func (i *Instance) APIVersion() string {
	return i.instance.APIVersion
}

func (i *Instance) OwnerReferences() []common.OwnerReference {
	serverOwnerReference := i.instance.GetOwnerReferences()
	serverOwnerReferenceLength := len(serverOwnerReference)
	if serverOwnerReferenceLength == 0 {
		return nil
	}
	ownerReference := make([]common.OwnerReference, 0, serverOwnerReferenceLength)
	for o := range serverOwnerReference {
		ownerReference = append(ownerReference, common.OwnerReference{
			Name: serverOwnerReference[o].Name,
			Kind: serverOwnerReference[o].Kind,
		})
	}
	return ownerReference
}

func (i *Instance) SetOwnerReference(reference common.OwnerReference) {
	i.instance.OwnerReferences = append(i.instance.OwnerReferences, metav1.OwnerReference{
		Name: reference.Name,
		Kind: reference.Kind,
	})
}

func (i *Instance) Labels() map[string]string {
	return i.instance.GetLabels()
}

func (i *Instance) SetNamespace(namespace string) {
	i.instance.SetNamespace(namespace)
}

func (i *Instance) DeepObject() any {
	return i.instance
}
