// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package switches

import (
	"context"

	inventoriesv1alpha1 "github.com/onmetal/metal-api/apis/inventory/v1alpha1"
	switchv1beta1 "github.com/onmetal/metal-api/apis/switch/v1beta1"
	domain "github.com/onmetal/metal-api/server-exploitation/domain/serverWarehouse"
	usecase "github.com/onmetal/metal-api/server-exploitation/usecase/serverWarehouse"
	"github.com/onmetal/metal-api/types/common"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/types"
	ctrlclient "sigs.k8s.io/controller-runtime/pkg/client"
)

type Commissioning struct {
	instance      *switchv1beta1.Switch
	serverAccount *inventoriesv1alpha1.Inventory
}

func NewSwitchInstanceCommissioning(client ctrlclient.Client,
	serverAccount *inventoriesv1alpha1.Inventory,
) (*Commissioning, error) {
	switchInstance := &switchv1beta1.Switch{}
	if err := client.
		Get(
			context.Background(),
			types.NamespacedName{
				Namespace: serverAccount.Namespace,
				Name:      serverAccount.Name,
			},
			switchInstance); err != nil {
		if apierrors.IsNotFound(err) {
			return nil, usecase.InstanceNotExist(
				common.NewObjectMetadata(serverAccount.Name, serverAccount.Namespace))
		}
		return nil, err
	}
	return &Commissioning{
		instance:      switchInstance,
		serverAccount: serverAccount,
	}, nil
}

func (s *Commissioning) InstanceCommissioning() domain.Instance {
	s.updateSwitchMetadataFromInventory()
	return NewSwitchInstance(s.instance)
}

func (s *Commissioning) updateSwitchMetadataFromInventory() {
	s.instance.UpdateSwitchLabels(s.serverAccount)
	s.instance.UpdateSwitchAnnotations(s.serverAccount)
}
