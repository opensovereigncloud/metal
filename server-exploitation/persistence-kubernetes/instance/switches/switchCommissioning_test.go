// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package switches

import (
	"testing"

	inventoriesv1alpha1 "github.com/onmetal/metal-api/apis/inventory/v1alpha1"
	switchv1beta1 "github.com/onmetal/metal-api/apis/switch/v1beta1"
	"github.com/stretchr/testify/assert"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

const (
	id           = "test"
	manufacturer = "test-manufacturer"
	productSKU   = "test-product-sku"
	serialNumber = "test-serial-number"
)

func TestSwitchCommissioningAnnotations(t *testing.T) {
	t.Parallel()
	a := assert.New(t)

	c := &Commissioning{
		instance:      emptySwitch(),
		serverAccount: inventory(),
	}
	result := c.InstanceCommissioning()
	a.NotNil(result)

	annotations := c.instance.GetAnnotations()
	a.Contains(annotations, switchv1beta1.CHardwareSerialAnnotation)
	a.Contains(annotations, switchv1beta1.CHardwareManufacturerAnnotation)
	a.Contains(annotations, switchv1beta1.CHardwareSkuAnnotation)
	a.Contains(annotations, switchv1beta1.CHardwareSerialAnnotation)
}

func TestSwitchCommissioningLabels(t *testing.T) {
	t.Parallel()
	a := assert.New(t)

	c := &Commissioning{
		instance:      emptySwitch(),
		serverAccount: inventory(),
	}
	result := c.InstanceCommissioning()
	a.NotNil(result)

	labels := c.instance.GetLabels()
	a.Contains(labels, "metalapi.onmetal.de/inventoried")
	a.Contains(labels, "metalapi.onmetal.de/inventory-ref")
}

func emptySwitch() *switchv1beta1.Switch {
	return &switchv1beta1.Switch{}
}

func inventory() *inventoriesv1alpha1.Inventory {
	return &inventoriesv1alpha1.Inventory{
		ObjectMeta: metav1.ObjectMeta{
			Name:      id,
			Namespace: "default",
		},
		Spec: inventoriesv1alpha1.InventorySpec{
			System: &inventoriesv1alpha1.SystemSpec{
				ID:           id,
				Manufacturer: manufacturer,
				ProductSKU:   productSKU,
				SerialNumber: serialNumber,
			},
		},
	}
}
