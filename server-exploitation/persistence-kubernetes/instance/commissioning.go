// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package instance

import (
	domainServerAccounting "github.com/onmetal/metal-api/server-exploitation/domain/serverAccounting"
	"github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/classificator"
	"github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/instance/machine"
	"github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/instance/switches"
	serveraccount "github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/serverAccount"
	usecase "github.com/onmetal/metal-api/server-exploitation/usecase/serverWarehouse"
	ctrlclient "sigs.k8s.io/controller-runtime/pkg/client"
)

func NewInstanceCommissioning(client ctrlclient.Client,
	serverAccount domainServerAccounting.ServerAccount) (Commissioning, error) {
	inventory, err := serveraccount.TranslateServerAccountToInventoryType(serverAccount.DeepObject())
	if err != nil {
		return nil, err
	}
	instanceClassification := classificator.NewInstanceClassificationByLabel(inventory.Labels)

	if instanceClassification.IsMachine() {
		return machine.NewMachineInstanceCommissioning(client, inventory)
	}
	if instanceClassification.IsSwitch() {
		return switches.NewSwitchInstanceCommissioning(client, inventory)
	}
	return nil, usecase.UnableToAccount(serverAccount.Name())
}
