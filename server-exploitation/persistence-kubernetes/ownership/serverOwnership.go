// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

//nolint:dupl
package ownership

import (
	machinev1alpha2 "github.com/onmetal/metal-api/apis/machine/v1alpha2"
	domain2 "github.com/onmetal/metal-api/server-exploitation/domain/serverWarehouse"
	kuberneteserrors "github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/errors"
	"github.com/onmetal/metal-api/server-exploitation/usecase/serverWarehouse/access"
	"github.com/onmetal/metal-api/types/common"
)

type ServerOwnership struct {
	serverExtractor common.ServerExtractor
	serverExecutor  common.ServerExecutor
	server          common.Server
	machine         *machinev1alpha2.Machine
	err             error
}

func NewServerOwnershipExecutor(
	extractor common.ServerExtractor,
	executor common.ServerExecutor) *ServerOwnership {
	return &ServerOwnership{
		serverExtractor: extractor,
		serverExecutor:  executor,
	}
}

func (s *ServerOwnership) New(instance domain2.Instance) access.Ownership {
	machine, ok := instance.DeepObject().(*machinev1alpha2.Machine)
	if !ok {
		s.err = kuberneteserrors.ErrTypeCast
		return s
	}
	s.machine = machine
	return s
}

func (s *ServerOwnership) IsNeeded() access.CreateOwnershipExecutor {
	serverMeta := common.NewObjectMetadata(
		s.machine.Status.OOB.Name,
		s.machine.Status.OOB.Namespace)
	server, err := s.serverExtractor.Get(serverMeta)
	if err != nil {
		s.err = err
		return s
	}
	if referenceExist(server.OwnerReferences(), s.machine.Name) {
		s.err = errReferenceExist
		return s
	}
	s.server = server
	return s
}

func (s *ServerOwnership) Create() error {
	if s.err != nil {
		return s.err
	}
	machineOwnerReference := machineOwnerReference(s.machine)
	s.server.SetOwnerReference(machineOwnerReference)
	return s.serverExecutor.Update(s.server)
}
