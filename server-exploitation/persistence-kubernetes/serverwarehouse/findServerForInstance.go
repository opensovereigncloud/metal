// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package serverwarehouse

import (
	"context"

	machinev1alpha2 "github.com/onmetal/metal-api/apis/machine/v1alpha2"
	domain "github.com/onmetal/metal-api/server-exploitation/domain/serverWarehouse"
	kuberneteserrors "github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/errors"
	"github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/server"
	usecase "github.com/onmetal/metal-api/server-exploitation/usecase/serverWarehouse"
	"github.com/onmetal/metal-api/types/common"
	oobv1 "github.com/onmetal/oob-operator/api/v1alpha1"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/types"
	ctrlclient "sigs.k8s.io/controller-runtime/pkg/client"
)

type ServerForInstanceExtractor struct {
	client ctrlclient.Client
}

func NewServerForInstanceExtractor(c ctrlclient.Client) *ServerForInstanceExtractor {
	return &ServerForInstanceExtractor{
		client: c,
	}
}

func (s *ServerForInstanceExtractor) ServerForInstance(instance domain.Instance) (common.Server, error) {
	machine, ok := instance.DeepObject().(*machinev1alpha2.Machine)
	if !ok {
		return nil, kuberneteserrors.ErrTypeCast
	}
	oobServer := &oobv1.OOB{}
	if err := s.client.
		Get(context.Background(), types.NamespacedName{
			Namespace: machine.Status.OOB.Namespace,
			Name:      machine.Status.OOB.Name,
		}, oobServer); err != nil {
		if apierrors.IsNotFound(err) {
			return nil, usecase.ServerNotFound(instance)
		}
		return nil, err
	}
	return server.NewOOBServer(oobServer), nil
}
