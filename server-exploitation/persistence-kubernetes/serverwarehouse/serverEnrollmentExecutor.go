// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package serverwarehouse

import (
	"context"

	"github.com/go-logr/logr"
	machinev1alpaha2 "github.com/onmetal/metal-api/apis/machine/v1alpha2"
	domain "github.com/onmetal/metal-api/server-exploitation/domain/serverWarehouse"
	"github.com/onmetal/metal-api/types/common"
	ctrlclient "sigs.k8s.io/controller-runtime/pkg/client"
)

type ServerEnrollmentExecutor struct {
	client ctrlclient.Client
}

func NewServerEnrollmentExecutor(c ctrlclient.Client) *ServerEnrollmentExecutor {
	return &ServerEnrollmentExecutor{
		client: c,
	}
}

type DryRunServerEnrollmentExecutor struct {
	log logr.Logger
}

func NewDryRunServerEnrollmentExecutor(l logr.Logger) *DryRunServerEnrollmentExecutor {
	return &DryRunServerEnrollmentExecutor{
		log: l,
	}
}

func (s *ServerEnrollmentExecutor) Enrolled(instance domain.Instance) bool {
	obj, ok := instance.DeepObject().(*machinev1alpaha2.Machine)
	if !ok {
		return false
	}
	return obj.Status.Reservation.Reference.Name != ""
}

func (s *ServerEnrollmentExecutor) CheckIn(server common.Server) error {
	if err := server.ValidatePowerCapabilities().SetPowerState(common.ServerPowerStateOn); err != nil {
		return err
	}
	deepObject, ok := server.DeepObject().(ctrlclient.Object)
	if !ok {
		return errSourceTypeCast
	}
	return s.client.
		Update(
			context.Background(),
			deepObject)
}

func (s *ServerEnrollmentExecutor) CheckOut(server common.Server) error {
	if err := server.ValidatePowerCapabilities().SetPowerState(common.ServerPowerStateOff); err != nil {
		return err
	}
	deepObject, ok := server.DeepObject().(ctrlclient.Object)
	if !ok {
		return errSourceTypeCast
	}
	return s.client.
		Update(
			context.Background(),
			deepObject)
}

func (s *DryRunServerEnrollmentExecutor) Enrolled(instance domain.Instance) bool {
	obj, ok := instance.DeepObject().(*machinev1alpaha2.Machine)
	if !ok {
		return false
	}
	return obj.Status.Reservation.Reference.Name != ""
}

func (s *DryRunServerEnrollmentExecutor) CheckIn(server common.Server) error {
	s.log.Info("server was enabled", server.Name())
	return nil
}

func (s *DryRunServerEnrollmentExecutor) CheckOut(server common.Server) error {
	s.log.Info("server was disabled", server.Name())
	return nil
}
