// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package serverwarehouse

import (
	"context"

	machinev1alpha2 "github.com/onmetal/metal-api/apis/machine/v1alpha2"
	switchv1beta1 "github.com/onmetal/metal-api/apis/switch/v1beta1"
	domain "github.com/onmetal/metal-api/server-exploitation/domain/serverWarehouse"
	ctrlclient "sigs.k8s.io/controller-runtime/pkg/client"
)

type InstanceUpdater struct {
	client ctrlclient.Client
}

func NewInstanceUpdater(c ctrlclient.Client) *InstanceUpdater {
	return &InstanceUpdater{
		client: c,
	}
}

func (i *InstanceUpdater) Update(instance domain.Instance) error {
	machineDeepObject, ok := instance.DeepObject().(*machinev1alpha2.Machine)
	if ok {
		status := machineDeepObject.Status
		if err := i.update(machineDeepObject); err != nil {
			return err
		}
		machineDeepObject.Status = status
		return i.updateStatus(machineDeepObject)
	}
	switchDeepObject, ok := instance.DeepObject().(*switchv1beta1.Switch)
	if ok {
		status := switchDeepObject.Status
		if err := i.update(switchDeepObject); err != nil {
			return err
		}
		switchDeepObject.Status = status
		return i.updateStatus(switchDeepObject)
	}
	return nil
}

func (i *InstanceUpdater) update(deepObject ctrlclient.Object) error {
	return i.client.
		Update(
			context.Background(),
			deepObject)
}

func (i *InstanceUpdater) updateStatus(deepObject ctrlclient.Object) error {
	return i.client.
		Status().
		Update(
			context.Background(),
			deepObject)
}
