// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package serverwarehouse

import (
	"context"

	switchv1beta1 "github.com/onmetal/metal-api/apis/switch/v1beta1"
	domain "github.com/onmetal/metal-api/server-exploitation/domain/serverWarehouse"
	"github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/instance/switches"
	usecase "github.com/onmetal/metal-api/server-exploitation/usecase/serverWarehouse"
	"github.com/onmetal/metal-api/types/common"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/types"
	ctrlclient "sigs.k8s.io/controller-runtime/pkg/client"
)

type SwitchExtractor struct {
	client ctrlclient.Client
}

func NewSwitchExtractor(c ctrlclient.Client) *SwitchExtractor {
	return &SwitchExtractor{
		client: c,
	}
}

func (i *SwitchExtractor) Get(metadata common.Metadata) (domain.Instance, error) {
	switchInstance := &switchv1beta1.Switch{}
	if err := i.client.Get(context.Background(), types.NamespacedName{
		Namespace: metadata.Namespace(),
		Name:      metadata.Name(),
	}, switchInstance); err != nil {
		if apierrors.IsNotFound(err) {
			return nil, usecase.InstanceNotExist(metadata)
		}
		return nil, err
	}
	return switches.NewSwitchInstance(switchInstance), nil
}
