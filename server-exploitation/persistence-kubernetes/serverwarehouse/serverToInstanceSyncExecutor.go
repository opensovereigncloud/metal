// /*
// Copyright (c) 2021 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package serverwarehouse

import (
	machinev1alpha2 "github.com/onmetal/metal-api/apis/machine/v1alpha2"
	"github.com/onmetal/metal-api/server-exploitation/usecase/serverWarehouse/access"
	oobv1 "github.com/onmetal/oob-operator/api/v1alpha1"
)

type ServerSyncStatusExecutor struct {
	source  *oobv1.OOB
	target  *machinev1alpha2.Machine
	syncErr error
}

func NewServerSyncStatusExecutor() *ServerSyncStatusExecutor {
	return &ServerSyncStatusExecutor{}
}

func (s *ServerSyncStatusExecutor) Source(source any) access.SynchronizationExecutor {
	server, ok := source.(*oobv1.OOB)
	if !ok {
		s.syncErr = errSourceTypeCast
		return s
	}
	s.source = server
	return s
}

func (s *ServerSyncStatusExecutor) Target(target any) access.SynchronizationExecutor {
	machine, ok := target.(*machinev1alpha2.Machine)
	if !ok {
		s.syncErr = errTargetTypeCast
		return s
	}
	s.target = machine
	return s
}

func (s *ServerSyncStatusExecutor) SyncTaints() access.SynchronizationExecutor {
	if s.syncErr != nil {
		return s
	}
	if v, ok := s.source.Labels[maintainedMachineLabel()]; ok && v == "true" {
		if getNoScheduleTaintIdx(s.target.Spec.Taints) == -1 {
			s.target.Spec.Taints = append(s.target.Spec.Taints, machinev1alpha2.Taint{
				Effect: machinev1alpha2.TaintEffectNoSchedule,
				Key:    machinev1alpha2.UnschedulableLabel,
			})
		}
	} else {
		if idx := getNoScheduleTaintIdx(s.target.Spec.Taints); idx >= 0 {
			s.target.Spec.Taints = append(s.target.Spec.Taints[:idx], s.target.Spec.Taints[idx+1:]...)
		}
	}
	return s
}

func (s *ServerSyncStatusExecutor) SyncSystemState() {
	if s.syncErr != nil {
		return
	}
	switch {
	case s.source.Status.OSReadTimedOut:
		s.target.Status.Reservation.Status = "Error"
	case (s.source.Status.OSMessage == "Ok" || s.source.Status.OSMessage == "Unknown") &&
		s.source.Status.Power != "Off":
		s.target.Status.Reservation.Status = "Running"
	}
}

func getNoScheduleTaintIdx(taints []machinev1alpha2.Taint) int {
	for t := range taints {
		if taints[t].Effect != machinev1alpha2.TaintEffectNoSchedule {
			continue
		}
		return t
	}
	return -1
}

func maintainedMachineLabel() string {
	return "onmetal.de/oob-ignore"
}
