// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package serverwarehouse_test

import (
	"testing"

	"github.com/onmetal/metal-api/pkg/provider/kubernetes-provider/fake"
	domain "github.com/onmetal/metal-api/server-exploitation/domain/serverWarehouse"
	"github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/serverwarehouse"
	"github.com/onmetal/metal-api/types/common"
	"github.com/stretchr/testify/assert"
)

var (
	fakeClient, err = fake.NewFakeClient()
)

func serverForInstanceExtractor(a *assert.Assertions) *serverwarehouse.ServerForInstanceExtractor {
	a.Nil(err)
	a.NotNil(fakeClient)
	return serverwarehouse.NewServerForInstanceExtractor(fakeClient)
}

func getInstance(metadata common.Metadata) (domain.Instance, error) {
	get := serverwarehouse.NewInstanceExtractor(fakeClient)

	return get.Get(metadata)
}

func TestFindServerForInstance(t *testing.T) {
	a := assert.New(t)

	findServerForInstance := serverForInstanceExtractor(a)

	instanceMeta := common.NewObjectMetadata(fake.AvailableInstanceUUID, "default")
	instance, err := getInstance(instanceMeta)
	a.Nil(err)
	a.NotNil(fakeClient)

	server, err := findServerForInstance.ServerForInstance(instance)
	a.Nil(err)
	a.NotEmpty(server.DeepObject())
	a.Equal(fake.ExistingServerUUID, server.Name())
}

func TestNoServerForInstance(t *testing.T) {
	a := assert.New(t)

	findServerForInstance := serverForInstanceExtractor(a)

	instanceMeta := common.NewObjectMetadata(fake.AvailableInstanceUUIDWithoutServerInfo, "default")
	instance, err := getInstance(instanceMeta)
	a.Nil(err)
	a.NotNil(instance)

	server, err := findServerForInstance.ServerForInstance(instance)
	a.NotNil(err)
	a.Nil(server)
}
