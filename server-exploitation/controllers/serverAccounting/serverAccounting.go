// /*
// Copyright (c) 2021 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package controllers

import (
	"context"
	"strings"

	"github.com/go-logr/logr"
	usecase "github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting"
	"github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting/dto"
	"github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting/rules"
	"github.com/onmetal/metal-api/types/common"
	oobv1 "github.com/onmetal/oob-operator/api/v1alpha1"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/event"
	"sigs.k8s.io/controller-runtime/pkg/predicate"
)

type ServerAccounting struct {
	log                      logr.Logger
	accountingUseCase        usecase.AccountingUseCase
	serverMustBeDisabledRule rules.ServerMustBeDisabledToAccountRule
	targetNamespace          string
}

func NewServerAccounting(l logr.Logger,
	accountingUseCase usecase.AccountingUseCase,
	serverMustBeDisabledRule rules.ServerMustBeDisabledToAccountRule,
	targetNamespace string) *ServerAccounting {
	return &ServerAccounting{
		log:                      l,
		accountingUseCase:        accountingUseCase,
		serverMustBeDisabledRule: serverMustBeDisabledRule,
		targetNamespace:          targetNamespace,
	}
}

// SetupWithManager sets up the controller with the Manager.
func (r *ServerAccounting) SetupWithManager(mgr ctrl.Manager) error {
	r.log.Info("starting")
	return ctrl.NewControllerManagedBy(mgr).
		For(&oobv1.OOB{}).
		WithEventFilter(r.constructPredicates()).
		Complete(r)
}

func (r *ServerAccounting) constructPredicates() predicate.Predicate {
	return predicate.Funcs{
		CreateFunc: r.serverDisabledOnCreate,
		UpdateFunc: r.serverDisabledOnUpdate,
		DeleteFunc: r.doNothingOnDelete,
	}
}

func (r *ServerAccounting) serverDisabledOnCreate(e event.CreateEvent) bool {
	serverMetadata := common.NewObjectMetadata(e.Object.GetName(), e.Object.GetNamespace())
	return r.serverMustBeDisabledRule.Disabled(serverMetadata)
}

func (r *ServerAccounting) serverDisabledOnUpdate(e event.UpdateEvent) bool {
	serverMetadata := common.NewObjectMetadata(e.ObjectNew.GetName(), e.ObjectNew.GetNamespace())
	return r.serverMustBeDisabledRule.Disabled(serverMetadata)
}

func (r *ServerAccounting) doNothingOnDelete(e event.DeleteEvent) bool {
	return false
}

//+kubebuilder:rbac:groups=oob.onmetal.de,resources=machines,verbs=get;list;watch;update;patch;delete
//+kubebuilder:rbac:groups=oob.onmetal.de,resources=machines/status,verbs=get;update;patch
//+kubebuilder:rbac:groups=oob.onmetal.de,resources=machines/finalizers,verbs=update

func (r *ServerAccounting) Reconcile(_ context.Context, req ctrl.Request) (ctrl.Result, error) {
	reqLogger := r.log.WithValues("server accounting", req.NamespacedName)

	serverAccountName := strings.TrimPrefix(req.Name, "m-")
	serverAccountMetadata := common.NewObjectMetadata(serverAccountName, r.targetNamespace)
	serverMetadata := common.NewObjectMetadata(req.Name, req.Namespace)
	objectsMeta := dto.AccountingObject{
		ServerAccountMetaData: serverAccountMetadata,
		ServerMetadata:        serverMetadata,
	}
	if err := r.accountingUseCase.Execute(objectsMeta); err != nil {
		if IsBusinessError(err) {
			reqLogger.Info("server accounting failed", "error", err)
			return ctrl.Result{}, nil
		}
		reqLogger.Info("server accounting failed", "error", err)
		return ctrl.Result{}, err
	}
	reqLogger.Info("reconciliation finished")
	return ctrl.Result{}, nil
}
