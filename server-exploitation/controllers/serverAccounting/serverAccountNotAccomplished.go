// /*
// Copyright (c) 2021 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package controllers

import (
	"context"
	"strings"
	"time"

	"github.com/go-logr/logr"
	usecase "github.com/onmetal/metal-api/server-exploitation/usecase/serverAccounting"
	"github.com/onmetal/metal-api/types/common"
	oobv1 "github.com/onmetal/oob-operator/api/v1alpha1"
	ctrl "sigs.k8s.io/controller-runtime"
)

type ServerAccountingNotAccomplished struct {
	log                       logr.Logger
	serverAccountAccomplished usecase.ServerAccountDisableIfNotAccomplishedUseCase
	disableServer             usecase.DisableServerIfNotAccomplishedUseCase
	targetNamespace           string
}

func NewServerAccountingNotAccomplished(l logr.Logger,
	serverAccountAccomplished usecase.ServerAccountDisableIfNotAccomplishedUseCase,
	disableServer usecase.DisableServerIfNotAccomplishedUseCase,
	targetNamespace string) *ServerAccountingNotAccomplished {
	return &ServerAccountingNotAccomplished{
		log:                       l,
		targetNamespace:           targetNamespace,
		serverAccountAccomplished: serverAccountAccomplished,
		disableServer:             disableServer,
	}
}

// SetupWithManager sets up the controller with the Manager.
func (r *ServerAccountingNotAccomplished) SetupWithManager(mgr ctrl.Manager) error {
	r.log.Info("starting")
	return ctrl.NewControllerManagedBy(mgr).
		For(&oobv1.OOB{}).
		Complete(r)
}

func (r *ServerAccountingNotAccomplished) Reconcile(_ context.Context, req ctrl.Request) (ctrl.Result, error) {
	reqLogger := r.log.WithValues("not accomplished", req.NamespacedName)

	serverAccountName := strings.TrimPrefix(req.Name, "m-")
	serverAccountMetadata := common.NewObjectMetadata(serverAccountName, r.targetNamespace)

	if r.serverAccountAccomplished.MustBeDisabled(serverAccountMetadata) {
		serverMetadata := common.NewObjectMetadata(req.Name, req.Namespace)
		if err := r.disableServer.Execute(serverMetadata); err != nil {
			return ctrl.Result{}, err
		}
	}

	reqLogger.Info("reconciliation finished")
	return ctrl.Result{RequeueAfter: r.repeatTimerMinute()}, nil
}

// nolint
func (r *ServerAccountingNotAccomplished) repeatTimerMinute() time.Duration {
	return 30 * time.Minute
}
