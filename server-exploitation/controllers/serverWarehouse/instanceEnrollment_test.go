// /*
// Copyright (c) 2022 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package controllers_test

import (
	"context"
	"testing"

	"github.com/onmetal/metal-api/pkg/logger"
	"github.com/onmetal/metal-api/pkg/provider/kubernetes-provider/fake"
	controllers "github.com/onmetal/metal-api/server-exploitation/controllers/serverWarehouse"
	kubernetestpersictence "github.com/onmetal/metal-api/server-exploitation/persistence-kubernetes/serverwarehouse"
	"github.com/onmetal/metal-api/server-exploitation/usecase/serverWarehouse/scenarios"
	"github.com/stretchr/testify/assert"
	"k8s.io/apimachinery/pkg/types"
	ctrl "sigs.k8s.io/controller-runtime"
)

func instanceScheduler(a *assert.Assertions) *controllers.InstanceEnrollment {
	l := logger.New()
	fakeClient, err := fake.NewFakeClient()
	a.Nil(err, "must create client")
	instanceExtractor := kubernetestpersictence.NewInstanceExtractor(fakeClient)
	serverEnrollmentExecutor := kubernetestpersictence.NewServerEnrollmentExecutor(fakeClient)
	serverForInstanceExtractor := kubernetestpersictence.NewServerForInstanceExtractor(fakeClient)
	instanceEnrollmentUseCase := scenarios.NewInstanceEnrollmentUseCase(
		instanceExtractor,
		serverEnrollmentExecutor,
		serverForInstanceExtractor)
	return controllers.NewInstanceEnrollment(
		l,
		instanceEnrollmentUseCase,
	)
}

func TestInstanceSchedulerReconcile(t *testing.T) {
	t.Parallel()
	a := assert.New(t)

	scheduler := instanceScheduler(a)
	a.NotNil(scheduler, "InstanceScheduler: must not be nil")
	req := ctrl.Request{
		NamespacedName: types.NamespacedName{
			Name:      fake.ExistingServerUUID,
			Namespace: "default",
		},
	}
	_, err := scheduler.Reconcile(context.Background(), req)
	a.Nil(err, "Cleaner: must reconcile without error")
}
