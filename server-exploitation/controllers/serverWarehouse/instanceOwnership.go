// /*
// Copyright (c) 2021 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package controllers

import (
	"context"
	"time"

	"github.com/go-logr/logr"
	machinev1alpha2 "github.com/onmetal/metal-api/apis/machine/v1alpha2"
	usecase "github.com/onmetal/metal-api/server-exploitation/usecase/serverWarehouse"
	"github.com/onmetal/metal-api/types/common"
	ctrl "sigs.k8s.io/controller-runtime"
)

type InstanceOwnership struct {
	log              logr.Logger
	ownershipUseCase usecase.OwnershipUseCase
}

func NewInstanceOwnership(l logr.Logger,
	ownership usecase.OwnershipUseCase) *InstanceOwnership {
	return &InstanceOwnership{
		log:              l,
		ownershipUseCase: ownership,
	}
}

// SetupWithManager sets up the controller with the Manager.
func (r *InstanceOwnership) SetupWithManager(mgr ctrl.Manager) error {
	r.log.Info("starting")
	return ctrl.NewControllerManagedBy(mgr).
		For(&machinev1alpha2.Machine{}).
		Complete(r)
}

func (r *InstanceOwnership) Reconcile(_ context.Context, req ctrl.Request) (ctrl.Result, error) {
	reqLogger := r.log.WithValues("Commissioning", req.NamespacedName)

	instanceMetadata := common.NewObjectMetadata(req.Name, req.Namespace)
	if err := r.ownershipUseCase.Create(instanceMetadata); err != nil {
		reqLogger.Info("ownershipUseCase", "error", err)
		return ctrl.Result{}, nil
	}
	reqLogger.Info("reconciliation finished")
	return ctrl.Result{RequeueAfter: r.checkOwnershipMinutes()}, nil
}

// nolint
func (r *InstanceOwnership) checkOwnershipMinutes() time.Duration {
	return 30 * time.Minute
}
