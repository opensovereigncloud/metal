// /*
// Copyright (c) 2021 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */

package controllers

import (
	"context"
	"strings"

	"github.com/go-logr/logr"
	usecase "github.com/onmetal/metal-api/server-exploitation/usecase/serverWarehouse"
	"github.com/onmetal/metal-api/server-exploitation/usecase/serverWarehouse/dto"
	"github.com/onmetal/metal-api/types/common"
	oobv1 "github.com/onmetal/oob-operator/api/v1alpha1"
	ctrl "sigs.k8s.io/controller-runtime"
)

type ServerToInstanceSync struct {
	log                         logr.Logger
	serverToInstanceSyncUseCase usecase.ServerToInstanceSync
	instanceNamespace           string
}

func NewServerToInstanceSync(l logr.Logger,
	serverToInstanceSyncUseCase usecase.ServerToInstanceSync,
	instanceNamespace string) *ServerToInstanceSync {
	return &ServerToInstanceSync{
		log:                         l,
		serverToInstanceSyncUseCase: serverToInstanceSyncUseCase,
		instanceNamespace:           instanceNamespace,
	}
}

// SetupWithManager sets up the controller with the Manager.
func (r *ServerToInstanceSync) SetupWithManager(mgr ctrl.Manager) error {
	r.log.Info("starting")
	return ctrl.NewControllerManagedBy(mgr).
		For(&oobv1.OOB{}).
		Complete(r)
}

func (r *ServerToInstanceSync) Reconcile(_ context.Context, req ctrl.Request) (ctrl.Result, error) {
	reqLogger := r.log.WithValues("ServerToInstanceSync", req.NamespacedName)

	serverMetadata := common.NewObjectMetadata(req.Name, req.Namespace)

	instanceName := strings.TrimPrefix(req.Name, "m-")
	instanceMetadata := common.NewObjectMetadata(instanceName, r.instanceNamespace)

	syncObjects := dto.ObjectForSynchronization{
		Server:   serverMetadata,
		Instance: instanceMetadata,
	}

	if err := r.serverToInstanceSyncUseCase.Execute(syncObjects); err != nil {
		if IsBusinessError(err) {
			reqLogger.Info("serverToInstanceSync failed", "error", err)
			return ctrl.Result{}, nil
		}
		reqLogger.Info("serverToInstanceSync failed", "error", err)
		return ctrl.Result{}, err
	}
	reqLogger.Info("reconciliation finished")
	return ctrl.Result{}, nil
}
