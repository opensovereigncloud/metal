/*
Copyright (c) 2023 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	v1 "k8s.io/api/core/v1"
)

// FieldSelectorSpecApplyConfiguration represents an declarative configuration of the FieldSelectorSpec type for use
// with apply.
type FieldSelectorSpecApplyConfiguration struct {
	LabelKey *string                 `json:"labelKey,omitempty"`
	FieldRef *v1.ObjectFieldSelector `json:"fieldRef,omitempty"`
}

// FieldSelectorSpecApplyConfiguration constructs an declarative configuration of the FieldSelectorSpec type for use with
// apply.
func FieldSelectorSpec() *FieldSelectorSpecApplyConfiguration {
	return &FieldSelectorSpecApplyConfiguration{}
}

// WithLabelKey sets the LabelKey field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LabelKey field is set to the value of the last call.
func (b *FieldSelectorSpecApplyConfiguration) WithLabelKey(value string) *FieldSelectorSpecApplyConfiguration {
	b.LabelKey = &value
	return b
}

// WithFieldRef sets the FieldRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FieldRef field is set to the value of the last call.
func (b *FieldSelectorSpecApplyConfiguration) WithFieldRef(value v1.ObjectFieldSelector) *FieldSelectorSpecApplyConfiguration {
	b.FieldRef = &value
	return b
}
