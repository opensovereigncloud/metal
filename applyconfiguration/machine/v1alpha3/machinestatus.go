/*
Copyright (c) 2023 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha3

import (
	v1alpha3 "github.com/onmetal/metal-api/apis/machine/v1alpha3"
)

// MachineStatusApplyConfiguration represents an declarative configuration of the MachineStatus type for use
// with apply.
type MachineStatusApplyConfiguration struct {
	Reboot      *string                        `json:"reboot,omitempty"`
	Health      *v1alpha3.MachineState         `json:"health,omitempty"`
	Network     *NetworkApplyConfiguration     `json:"network,omitempty"`
	Reservation *ReservationApplyConfiguration `json:"reservation,omitempty"`
	Orphaned    *bool                          `json:"orphaned,omitempty"`
}

// MachineStatusApplyConfiguration constructs an declarative configuration of the MachineStatus type for use with
// apply.
func MachineStatus() *MachineStatusApplyConfiguration {
	return &MachineStatusApplyConfiguration{}
}

// WithReboot sets the Reboot field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Reboot field is set to the value of the last call.
func (b *MachineStatusApplyConfiguration) WithReboot(value string) *MachineStatusApplyConfiguration {
	b.Reboot = &value
	return b
}

// WithHealth sets the Health field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Health field is set to the value of the last call.
func (b *MachineStatusApplyConfiguration) WithHealth(value v1alpha3.MachineState) *MachineStatusApplyConfiguration {
	b.Health = &value
	return b
}

// WithNetwork sets the Network field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Network field is set to the value of the last call.
func (b *MachineStatusApplyConfiguration) WithNetwork(value *NetworkApplyConfiguration) *MachineStatusApplyConfiguration {
	b.Network = value
	return b
}

// WithReservation sets the Reservation field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Reservation field is set to the value of the last call.
func (b *MachineStatusApplyConfiguration) WithReservation(value *ReservationApplyConfiguration) *MachineStatusApplyConfiguration {
	b.Reservation = value
	return b
}

// WithOrphaned sets the Orphaned field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Orphaned field is set to the value of the last call.
func (b *MachineStatusApplyConfiguration) WithOrphaned(value bool) *MachineStatusApplyConfiguration {
	b.Orphaned = &value
	return b
}
