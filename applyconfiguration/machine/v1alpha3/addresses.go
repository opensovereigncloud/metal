/*
Copyright (c) 2023 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha3

import (
	v1alpha3 "github.com/onmetal/metal-api/apis/machine/v1alpha3"
)

// AddressesApplyConfiguration represents an declarative configuration of the Addresses type for use
// with apply.
type AddressesApplyConfiguration struct {
	IPv4 []v1alpha3.IPAddressSpec `json:"ipv4,omitempty"`
	IPv6 []v1alpha3.IPAddressSpec `json:"ipv6,omitempty"`
}

// AddressesApplyConfiguration constructs an declarative configuration of the Addresses type for use with
// apply.
func Addresses() *AddressesApplyConfiguration {
	return &AddressesApplyConfiguration{}
}

// WithIPv4 adds the given value to the IPv4 field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IPv4 field.
func (b *AddressesApplyConfiguration) WithIPv4(values ...v1alpha3.IPAddressSpec) *AddressesApplyConfiguration {
	for i := range values {
		b.IPv4 = append(b.IPv4, values[i])
	}
	return b
}

// WithIPv6 adds the given value to the IPv6 field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the IPv6 field.
func (b *AddressesApplyConfiguration) WithIPv6(values ...v1alpha3.IPAddressSpec) *AddressesApplyConfiguration {
	for i := range values {
		b.IPv6 = append(b.IPv6, values[i])
	}
	return b
}
