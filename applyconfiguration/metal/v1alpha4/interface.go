/*
Copyright (c) 2023 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha4

// InterfaceApplyConfiguration represents an declarative configuration of the Interface type for use
// with apply.
type InterfaceApplyConfiguration struct {
	Name            *string                              `json:"name,omitempty"`
	SwitchReference *ResourceReferenceApplyConfiguration `json:"switch_reference,omitempty"`
	Addresses       *AddressesApplyConfiguration         `json:"addresses,omitempty"`
	Peer            *PeerApplyConfiguration              `json:"peer,omitempty"`
	Lanes           *uint32                              `json:"lanes,omitempty"`
	Moved           *bool                                `json:"moved,omitempty"`
	Unknown         *bool                                `json:"unknown,omitempty"`
}

// InterfaceApplyConfiguration constructs an declarative configuration of the Interface type for use with
// apply.
func Interface() *InterfaceApplyConfiguration {
	return &InterfaceApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *InterfaceApplyConfiguration) WithName(value string) *InterfaceApplyConfiguration {
	b.Name = &value
	return b
}

// WithSwitchReference sets the SwitchReference field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SwitchReference field is set to the value of the last call.
func (b *InterfaceApplyConfiguration) WithSwitchReference(value *ResourceReferenceApplyConfiguration) *InterfaceApplyConfiguration {
	b.SwitchReference = value
	return b
}

// WithAddresses sets the Addresses field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Addresses field is set to the value of the last call.
func (b *InterfaceApplyConfiguration) WithAddresses(value *AddressesApplyConfiguration) *InterfaceApplyConfiguration {
	b.Addresses = value
	return b
}

// WithPeer sets the Peer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Peer field is set to the value of the last call.
func (b *InterfaceApplyConfiguration) WithPeer(value *PeerApplyConfiguration) *InterfaceApplyConfiguration {
	b.Peer = value
	return b
}

// WithLanes sets the Lanes field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Lanes field is set to the value of the last call.
func (b *InterfaceApplyConfiguration) WithLanes(value uint32) *InterfaceApplyConfiguration {
	b.Lanes = &value
	return b
}

// WithMoved sets the Moved field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Moved field is set to the value of the last call.
func (b *InterfaceApplyConfiguration) WithMoved(value bool) *InterfaceApplyConfiguration {
	b.Moved = &value
	return b
}

// WithUnknown sets the Unknown field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Unknown field is set to the value of the last call.
func (b *InterfaceApplyConfiguration) WithUnknown(value bool) *InterfaceApplyConfiguration {
	b.Unknown = &value
	return b
}
