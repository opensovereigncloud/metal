/*
Copyright (c) 2023 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha4

// IPAMSpecApplyConfiguration represents an declarative configuration of the IPAMSpec type for use
// with apply.
type IPAMSpecApplyConfiguration struct {
	SouthSubnets      *IPAMSelectionSpecApplyConfiguration `json:"southSubnets,omitempty"`
	LoopbackAddresses *IPAMSelectionSpecApplyConfiguration `json:"loopbackAddresses,omitempty"`
}

// IPAMSpecApplyConfiguration constructs an declarative configuration of the IPAMSpec type for use with
// apply.
func IPAMSpec() *IPAMSpecApplyConfiguration {
	return &IPAMSpecApplyConfiguration{}
}

// WithSouthSubnets sets the SouthSubnets field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SouthSubnets field is set to the value of the last call.
func (b *IPAMSpecApplyConfiguration) WithSouthSubnets(value *IPAMSelectionSpecApplyConfiguration) *IPAMSpecApplyConfiguration {
	b.SouthSubnets = value
	return b
}

// WithLoopbackAddresses sets the LoopbackAddresses field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the LoopbackAddresses field is set to the value of the last call.
func (b *IPAMSpecApplyConfiguration) WithLoopbackAddresses(value *IPAMSelectionSpecApplyConfiguration) *IPAMSpecApplyConfiguration {
	b.LoopbackAddresses = value
	return b
}
