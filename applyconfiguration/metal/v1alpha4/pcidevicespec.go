/*
Copyright (c) 2023 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha4

// PCIDeviceSpecApplyConfiguration represents an declarative configuration of the PCIDeviceSpec type for use
// with apply.
type PCIDeviceSpecApplyConfiguration struct {
	BusID                *string                                     `json:"busId,omitempty"`
	Address              *string                                     `json:"address,omitempty"`
	Vendor               *PCIDeviceDescriptionSpecApplyConfiguration `json:"vendor,omitempty"`
	Subvendor            *PCIDeviceDescriptionSpecApplyConfiguration `json:"subvendor,omitempty"`
	Type                 *PCIDeviceDescriptionSpecApplyConfiguration `json:"type,omitempty"`
	Subtype              *PCIDeviceDescriptionSpecApplyConfiguration `json:"subtype,omitempty"`
	Class                *PCIDeviceDescriptionSpecApplyConfiguration `json:"class,omitempty"`
	Subclass             *PCIDeviceDescriptionSpecApplyConfiguration `json:"subclass,omitempty"`
	ProgrammingInterface *PCIDeviceDescriptionSpecApplyConfiguration `json:"interface,omitempty"`
}

// PCIDeviceSpecApplyConfiguration constructs an declarative configuration of the PCIDeviceSpec type for use with
// apply.
func PCIDeviceSpec() *PCIDeviceSpecApplyConfiguration {
	return &PCIDeviceSpecApplyConfiguration{}
}

// WithBusID sets the BusID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BusID field is set to the value of the last call.
func (b *PCIDeviceSpecApplyConfiguration) WithBusID(value string) *PCIDeviceSpecApplyConfiguration {
	b.BusID = &value
	return b
}

// WithAddress sets the Address field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Address field is set to the value of the last call.
func (b *PCIDeviceSpecApplyConfiguration) WithAddress(value string) *PCIDeviceSpecApplyConfiguration {
	b.Address = &value
	return b
}

// WithVendor sets the Vendor field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Vendor field is set to the value of the last call.
func (b *PCIDeviceSpecApplyConfiguration) WithVendor(value *PCIDeviceDescriptionSpecApplyConfiguration) *PCIDeviceSpecApplyConfiguration {
	b.Vendor = value
	return b
}

// WithSubvendor sets the Subvendor field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Subvendor field is set to the value of the last call.
func (b *PCIDeviceSpecApplyConfiguration) WithSubvendor(value *PCIDeviceDescriptionSpecApplyConfiguration) *PCIDeviceSpecApplyConfiguration {
	b.Subvendor = value
	return b
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *PCIDeviceSpecApplyConfiguration) WithType(value *PCIDeviceDescriptionSpecApplyConfiguration) *PCIDeviceSpecApplyConfiguration {
	b.Type = value
	return b
}

// WithSubtype sets the Subtype field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Subtype field is set to the value of the last call.
func (b *PCIDeviceSpecApplyConfiguration) WithSubtype(value *PCIDeviceDescriptionSpecApplyConfiguration) *PCIDeviceSpecApplyConfiguration {
	b.Subtype = value
	return b
}

// WithClass sets the Class field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Class field is set to the value of the last call.
func (b *PCIDeviceSpecApplyConfiguration) WithClass(value *PCIDeviceDescriptionSpecApplyConfiguration) *PCIDeviceSpecApplyConfiguration {
	b.Class = value
	return b
}

// WithSubclass sets the Subclass field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Subclass field is set to the value of the last call.
func (b *PCIDeviceSpecApplyConfiguration) WithSubclass(value *PCIDeviceDescriptionSpecApplyConfiguration) *PCIDeviceSpecApplyConfiguration {
	b.Subclass = value
	return b
}

// WithProgrammingInterface sets the ProgrammingInterface field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ProgrammingInterface field is set to the value of the last call.
func (b *PCIDeviceSpecApplyConfiguration) WithProgrammingInterface(value *PCIDeviceDescriptionSpecApplyConfiguration) *PCIDeviceSpecApplyConfiguration {
	b.ProgrammingInterface = value
	return b
}
