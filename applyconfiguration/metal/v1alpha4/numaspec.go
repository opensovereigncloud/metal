/*
Copyright (c) 2023 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha4

// NumaSpecApplyConfiguration represents an declarative configuration of the NumaSpec type for use
// with apply.
type NumaSpecApplyConfiguration struct {
	ID        *int                          `json:"id,omitempty"`
	CPUs      []int                         `json:"cpus,omitempty"`
	Distances []int                         `json:"distances,omitempty"`
	Memory    *MemorySpecApplyConfiguration `json:"memory,omitempty"`
}

// NumaSpecApplyConfiguration constructs an declarative configuration of the NumaSpec type for use with
// apply.
func NumaSpec() *NumaSpecApplyConfiguration {
	return &NumaSpecApplyConfiguration{}
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *NumaSpecApplyConfiguration) WithID(value int) *NumaSpecApplyConfiguration {
	b.ID = &value
	return b
}

// WithCPUs adds the given value to the CPUs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the CPUs field.
func (b *NumaSpecApplyConfiguration) WithCPUs(values ...int) *NumaSpecApplyConfiguration {
	for i := range values {
		b.CPUs = append(b.CPUs, values[i])
	}
	return b
}

// WithDistances adds the given value to the Distances field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Distances field.
func (b *NumaSpecApplyConfiguration) WithDistances(values ...int) *NumaSpecApplyConfiguration {
	for i := range values {
		b.Distances = append(b.Distances, values[i])
	}
	return b
}

// WithMemory sets the Memory field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Memory field is set to the value of the last call.
func (b *NumaSpecApplyConfiguration) WithMemory(value *MemorySpecApplyConfiguration) *NumaSpecApplyConfiguration {
	b.Memory = value
	return b
}
