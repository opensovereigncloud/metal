/*
Copyright (c) 2023 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha4

import (
	v1alpha4 "github.com/ironcore-dev/metal/apis/metal/v1alpha4"
	v1 "k8s.io/api/core/v1"
)

// NetworkSwitchStatusApplyConfiguration represents an declarative configuration of the NetworkSwitchStatus type for use
// with apply.
type NetworkSwitchStatusApplyConfiguration struct {
	ConfigRef             *v1.LocalObjectReference           `json:"configRef,omitempty"`
	RoutingConfigTemplate *v1.LocalObjectReference           `json:"routingConfigTemplate,omitempty"`
	ASN                   *uint32                            `json:"asn,omitempty"`
	TotalPorts            *uint32                            `json:"totalPorts,omitempty"`
	SwitchPorts           *uint32                            `json:"switchPorts,omitempty"`
	Role                  *string                            `json:"role,omitempty"`
	Layer                 *uint32                            `json:"layer,omitempty"`
	Interfaces            map[string]*v1alpha4.InterfaceSpec `json:"interfaces,omitempty"`
	Subnets               []*v1alpha4.SubnetSpec             `json:"subnets,omitempty"`
	LoopbackAddresses     []*v1alpha4.IPAddressSpec          `json:"loopbackAddresses,omitempty"`
	State                 *string                            `json:"state,omitempty"`
	Message               *string                            `json:"message,omitempty"`
	Conditions            []*v1alpha4.ConditionSpec          `json:"conditions,omitempty"`
}

// NetworkSwitchStatusApplyConfiguration constructs an declarative configuration of the NetworkSwitchStatus type for use with
// apply.
func NetworkSwitchStatus() *NetworkSwitchStatusApplyConfiguration {
	return &NetworkSwitchStatusApplyConfiguration{}
}

// WithConfigRef sets the ConfigRef field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConfigRef field is set to the value of the last call.
func (b *NetworkSwitchStatusApplyConfiguration) WithConfigRef(value v1.LocalObjectReference) *NetworkSwitchStatusApplyConfiguration {
	b.ConfigRef = &value
	return b
}

// WithRoutingConfigTemplate sets the RoutingConfigTemplate field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RoutingConfigTemplate field is set to the value of the last call.
func (b *NetworkSwitchStatusApplyConfiguration) WithRoutingConfigTemplate(value v1.LocalObjectReference) *NetworkSwitchStatusApplyConfiguration {
	b.RoutingConfigTemplate = &value
	return b
}

// WithASN sets the ASN field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ASN field is set to the value of the last call.
func (b *NetworkSwitchStatusApplyConfiguration) WithASN(value uint32) *NetworkSwitchStatusApplyConfiguration {
	b.ASN = &value
	return b
}

// WithTotalPorts sets the TotalPorts field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TotalPorts field is set to the value of the last call.
func (b *NetworkSwitchStatusApplyConfiguration) WithTotalPorts(value uint32) *NetworkSwitchStatusApplyConfiguration {
	b.TotalPorts = &value
	return b
}

// WithSwitchPorts sets the SwitchPorts field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SwitchPorts field is set to the value of the last call.
func (b *NetworkSwitchStatusApplyConfiguration) WithSwitchPorts(value uint32) *NetworkSwitchStatusApplyConfiguration {
	b.SwitchPorts = &value
	return b
}

// WithRole sets the Role field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Role field is set to the value of the last call.
func (b *NetworkSwitchStatusApplyConfiguration) WithRole(value string) *NetworkSwitchStatusApplyConfiguration {
	b.Role = &value
	return b
}

// WithLayer sets the Layer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Layer field is set to the value of the last call.
func (b *NetworkSwitchStatusApplyConfiguration) WithLayer(value uint32) *NetworkSwitchStatusApplyConfiguration {
	b.Layer = &value
	return b
}

// WithInterfaces puts the entries into the Interfaces field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Interfaces field,
// overwriting an existing map entries in Interfaces field with the same key.
func (b *NetworkSwitchStatusApplyConfiguration) WithInterfaces(entries map[string]*v1alpha4.InterfaceSpec) *NetworkSwitchStatusApplyConfiguration {
	if b.Interfaces == nil && len(entries) > 0 {
		b.Interfaces = make(map[string]*v1alpha4.InterfaceSpec, len(entries))
	}
	for k, v := range entries {
		b.Interfaces[k] = v
	}
	return b
}

// WithSubnets adds the given value to the Subnets field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Subnets field.
func (b *NetworkSwitchStatusApplyConfiguration) WithSubnets(values ...**v1alpha4.SubnetSpec) *NetworkSwitchStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSubnets")
		}
		b.Subnets = append(b.Subnets, *values[i])
	}
	return b
}

// WithLoopbackAddresses adds the given value to the LoopbackAddresses field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the LoopbackAddresses field.
func (b *NetworkSwitchStatusApplyConfiguration) WithLoopbackAddresses(values ...**v1alpha4.IPAddressSpec) *NetworkSwitchStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithLoopbackAddresses")
		}
		b.LoopbackAddresses = append(b.LoopbackAddresses, *values[i])
	}
	return b
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *NetworkSwitchStatusApplyConfiguration) WithState(value string) *NetworkSwitchStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *NetworkSwitchStatusApplyConfiguration) WithMessage(value string) *NetworkSwitchStatusApplyConfiguration {
	b.Message = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *NetworkSwitchStatusApplyConfiguration) WithConditions(values ...**v1alpha4.ConditionSpec) *NetworkSwitchStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
