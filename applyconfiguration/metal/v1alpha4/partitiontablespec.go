/*
Copyright (c) 2023 T-Systems International GmbH, SAP SE or an SAP affiliate company. All right reserved

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha4

// PartitionTableSpecApplyConfiguration represents an declarative configuration of the PartitionTableSpec type for use
// with apply.
type PartitionTableSpecApplyConfiguration struct {
	Type       *string                           `json:"type,omitempty"`
	Partitions []PartitionSpecApplyConfiguration `json:"partitions,omitempty"`
}

// PartitionTableSpecApplyConfiguration constructs an declarative configuration of the PartitionTableSpec type for use with
// apply.
func PartitionTableSpec() *PartitionTableSpecApplyConfiguration {
	return &PartitionTableSpecApplyConfiguration{}
}

// WithType sets the Type field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Type field is set to the value of the last call.
func (b *PartitionTableSpecApplyConfiguration) WithType(value string) *PartitionTableSpecApplyConfiguration {
	b.Type = &value
	return b
}

// WithPartitions adds the given value to the Partitions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Partitions field.
func (b *PartitionTableSpecApplyConfiguration) WithPartitions(values ...*PartitionSpecApplyConfiguration) *PartitionTableSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPartitions")
		}
		b.Partitions = append(b.Partitions, *values[i])
	}
	return b
}
